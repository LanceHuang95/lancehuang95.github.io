<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大话数据结构学习笔记-排序</title>
      <link href="/2020/01/20/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9.%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/01/20/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9.%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="9-排序"><a href="#9-排序" class="headerlink" title="9 排序"></a>9 排序</h2><p>假设含有n个记录的序列为{r1,r2,……,rn}，其相应的关键字分别为{k1,k2,……,kn}，需确定1,2,……,n的一种排列p1,p2,……,pn，使其相应的关键字满足kp1≤kp2≤……≤kpn（非递减或非递增）关系，即使得序列成为一个<strong>按关键字有序的序列{rp1,rp2,……,rpn}</strong>，这样的操作就称为排序。</p><p>在排序问题中，通常将数据元素称为记录。显然我们输入的是一个记录集合，输出的也是一个记录集合。所以说，可以将排序看成是线性表的一种操作。排序的依据是关键字之间的大小关系，那么，<strong>对同一个记录集合，针对不同的关键字进行排序，可以得到不同序列。</strong></p><p>对于组合排序的问题，当然可以先排序总分，若总分相等的情况下，再排序语数外总分，但这是比较土的办法。我们还可以应用一个技巧来实现一次排序即完成组合排序问题。例如，把总分与语数外都当成字符串首尾连接在一起（注意如果语数外总分不够三位，需要在前面补0）。从此也可看出，多个关键字的排序最终都可以转化为单个关键字的排序。因此，我们这里主要讨论的是单个关键字的排序。</p><p>对于次关键字，因为待排序的记录序列中可能存在两个或两个以上的关键字相等的记录，排序结果可能会存在不唯一的情况，我们给出了稳定与不稳定排序的定义。假设ki=kj(1≤i≤n,1≤j≤n,i≠j），且在排序前的序列中ri领先于rj（即i&lt;j）。如果排序后ri仍领先于rj，则称所用的排序方法是稳定的；反之，若可能使得排序后的序列中rj领先ri，则称所用的排序方法是不稳定的。</p><p>根据在排序过程中待排序的记录是否全部被放置在内存中，排序分为内排序和外排序。<br>内排序是在排序整个过程中，待排序的所有记录全部被放置在内存中。外排序是由于排序的记录个数太多，不能同时放置在内存，整个排序过程需要在内外存之间多次交换数据才能进行。</p><p>对于内排序来说，排序算法的性能主要是受3个方面影响：</p><ol><li><p>时间性能。在内排序中，主要进行两种操作：比较和移动。比较指关键字之间的比较，这是要做排序最起码的操作。移动指记录从一个位置移动到另一个位置。事实上，移动可以通过改变记录的存储方式来予以避免。总之，高效率的内排序算法应该是具有尽可能少的关键字比较次数和尽可能少的记录移动次数。</p></li><li><p>辅助空间。即执行算法所需要的辅助存储空间，它是除了存放待排序所占用的存储空间之外，执行算法所需要的其他存储空间。</p></li><li><p>算法的复杂性。这里指的是算法本身的复杂度，而不是指算法的时间复杂度。</p></li></ol><p>根据排序过程中借助的主要操作，我们把内排序分为：插入排序、交换排序、选择排序和归并排序。<br>按照算法的复杂度又可分为两大类：冒泡排序、简单选择排序和直接插入排序属于简单算法；而希尔排序、堆排序、归并排序、快速排序属于改进算法。</p><h3 id="1-排序的基本概念域分类"><a href="#1-排序的基本概念域分类" class="headerlink" title="1.排序的基本概念域分类"></a>1.排序的基本概念域分类</h3><h3 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h3><h3 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h3><h3 id="4-插入排序"><a href="#4-插入排序" class="headerlink" title="4.插入排序"></a>4.插入排序</h3><h3 id="5-希尔排序"><a href="#5-希尔排序" class="headerlink" title="5.希尔排序"></a>5.希尔排序</h3><h3 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6.堆排序"></a>6.堆排序</h3><h3 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7.归并排序"></a>7.归并排序</h3><h3 id="8-快速排序"><a href="#8-快速排序" class="headerlink" title="8.快速排序"></a>8.快速排序</h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话数据结构学习笔记-查找</title>
      <link href="/2020/01/10/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8.%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/01/10/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8.%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="8-查找"><a href="#8-查找" class="headerlink" title="8 查找"></a>8 查找</h2><h3 id="1-查找概论"><a href="#1-查找概论" class="headerlink" title="1.查找概论"></a>1.查找概论</h3><p>查找表(Search Table)是由同一类型的数据元素构成的集合</p><p>关键字(Key)是数据元素中的某个数据项的值。若此关键字可以唯一标识一个元素，则称此关键字为主关键字(Primary Key);对于那些可以识别多个元素的关键字，我们称其为次关键字(Secondary Key)</p><p>查找(Searching)就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素</p><p>查找表按照操作方式分为两种：</p><ul><li>静态查找表：只作查找操作的查找表</li><li>动态查找表：查找时插入或删除数据元素</li></ul><h3 id="2-顺序表查找"><a href="#2-顺序表查找" class="headerlink" title="2.顺序表查找"></a>2.顺序表查找</h3><p>顺序查找(Sequential Search)又叫线性查找，是最基本的查找技术，查找过程是：从表中第一个（或者最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，者查找成功，找到所查的记录；如果直到最后一个（或者第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*顺序表查找算法*/</span><span class="token comment" spellcheck="true">/*顺序查找，a为数组，len为数组长度，key要查找的关键字*/</span><span class="token keyword">bool</span> <span class="token function">Sequential_Search</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//每次循环都需要判断i是否越界</span>    <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*顺序表查找算法优化，有哨兵顺序查找*/</span><span class="token comment" spellcheck="true">/*顺序查找，a为数组，len为数组长度，key要查找的关键字*/</span><span class="token keyword">bool</span> <span class="token function">Sequential_Search2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>   a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在数组的最后面放置一个哨兵</span>   <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> key<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       i<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果i=len,则说明数组中查找失败</span><span class="token punctuation">}</span></code></pre><h3 id="3-有序表查找-折半"><a href="#3-有序表查找-折半" class="headerlink" title="3.有序表查找(折半)"></a>3.有序表查找(折半)</h3><p><strong>折半查找</strong><br>折半查找（Binary Search），又称为二分查找。前提是线性表中的记录必须是 关键码有序，线性表必须采用 顺序存储。</p><p>基本思想：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止。</p><p>优缺点:</p><ul><li>优点<blockquote><p>折半查找，优点是比较次数少，查找速度快，平均性能好；</p></blockquote></li><li>缺点<blockquote><p>要求待查表为有序表，且插入、删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p></blockquote></li></ul><p>迭代实现折半查找:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*折半查找,迭代实现，时间复杂度O(log n)*/</span><span class="token keyword">int</span> <span class="token function">BinarySearch_Iterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> low<span class="token punctuation">,</span>high<span class="token punctuation">,</span>mid<span class="token punctuation">;</span>    low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    high<span class="token operator">=</span>len<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//折半</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//若查找值比中值小，最高下标调整到中位下标小一位</span>            high<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">></span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若查找值比中值大，最低下标调整到中位下标大一位</span>            low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//若相等说明mid即为查找到的位置</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>递归实现折半查找:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*折半查找,递归实现，时间复杂度O(log n)*/</span><span class="token keyword">int</span> <span class="token function">BinarySearch_Recursion</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">></span> high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">BinarySearch_Recursion</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>len<span class="token punctuation">,</span>low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">BinarySearch_Recursion</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>len<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>插值查找</strong></p><ul><li>折半查找中mid=(low+high)/2=low+(high-low)/2</li><li>插值查找中mid=low+(high-low)*[(key-a[low])/(a[high]-a[low])]</li></ul><p>插值查找时间复杂度O(log n),但是对于数据集合较长，且关键字分布比较均匀的数据集合来说，插值查找的算法性能比折半查找要好，其它的则不适用</p><p><strong>斐波那契查找</strong><br>斐波那契查找也叫做黄金分割法查找，它也是根据折半查找算法来进行修改和改进的。</p><p>对于斐波那契数列：1、1、2、3、5、8、13、21、34、55、89……（也可以从0开始），前后两个数字的比值随着数列的增加，越来越接近黄金比值0.618。如这里的89，把它想象成整个有序表的元素个数，而89是由前面的两个斐波那契数34和55相加之后的和，也就是说把元素个数为89的有序表分成由前55个数据元素组成的前半段和由后34个数据元素组成的后半段，那么前半段元素个数和整个有序表长度的比值就接近黄金比值0.618，假如要查找的元素在前半段，那么继续按照斐波那契数列来看，55 = 34 + 21，所以继续把前半段分成前34个数据元素的前半段和后21个元素的后半段，继续查找，如此反复，直到查找成功或失败，这样就把斐波那契数列应用到查找算法中了</p><p>当有序表的元素个数不是斐波那契数列中的某个数字时，需要把有序表的元素个数长度补齐，让它成为斐波那契数列中的一个数值，当然把原有序表截断肯定是不可能的，不然还怎么查找。然后图中标识每次取斐波那契数列中的某个值时(F[k])，都会进行-1操作，这是因为有序表数组位序从0开始的，纯粹是为了迎合位序从0开始。所以用迭代实现斐波那契查找算法如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> FIB_MAXSIZE 100</span><span class="token comment" spellcheck="true">/*生成斐波那契数列*/</span><span class="token keyword">void</span> <span class="token function">ProduceFib</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>fib<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    fib<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    fib<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fib<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fib<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> fib<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*斐波那契查找，查找成功返回位序，否则返回-1*/</span><span class="token comment" spellcheck="true">/*a为数组，len为数组长度，key要查找的关键字*/</span><span class="token keyword">int</span> <span class="token function">FibonacciSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fib<span class="token punctuation">[</span>FIB_MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">ProduceFib</span><span class="token punctuation">(</span>fib<span class="token punctuation">,</span>FIB_MAXSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//找到有序表元素个数在斐波那契数列中最接近的最大数列值</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>high<span class="token operator">></span>fib<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//fib[k]是数组的长度,而数组索引(low mid high)是从0开始的,所以需要进行-1来跟数组索引匹配</span>    <span class="token punctuation">{</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//补齐有序表,从a[len]到a[fib[k]-1]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>fib<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>low<span class="token operator">+</span>fib<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算当前分隔的下标</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            high <span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>            k<span class="token operator">=</span>k<span class="token number">-1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//若key > a[mid]，则key在两段中较大的那一段，那一段长度为fib[k],故分割点为f[k-1];</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            low <span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            k<span class="token operator">=</span>k<span class="token number">-2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注意理解，fib[k]=fib[k-1]+fib[k-2]</span>                    <span class="token comment" spellcheck="true">//若key > a[mid]，则key在两段中较小的那一段,那一段长度为fib[k-1],故分割点为f[k-2];</span>        <span class="token punctuation">}</span>yidong        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// key ==a[mid]</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span>len<span class="token number">-1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> len<span class="token number">-1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//说明查到的数据元素为补全值</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>斐波那契查找的时间复杂度还是O(log2 n)，但是与折半查找相比，斐波那契查找的优点是它只涉及加法和减法运算，而不用除法，而除法比加减法要占用更多的时间，因此，斐波那契查找的运行时间理论上比折半查找小，但是还是得视具体情况而定。</p><p>综上，虽然三种有序表的查找本质上是分隔点不同，其核心思想都一样。</p><h3 id="4-线性索引查找"><a href="#4-线性索引查找" class="headerlink" title="4.线性索引查找"></a>4.线性索引查找</h3><p>索引就是把一个关键字与它对应的记录相关联的过程。一个索引由若干个索引项构成，每个索引项至少应包含关键字和其对应的记录在存储器中的位置等信息。</p><p>索引技术是组织大型数据库以及磁盘文件的一种重要技术。索引按照结构可以分为线性索引，树形索引和多级索引。所谓的线性索引就是将索引项集合组织为线性结构，也称索引表。</p><p>重点了解三种线性索引：稠密索引，分块索引和倒排索引。</p><p><strong>稠密索引</strong><br>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项，索引项一定是按照关键码有序的排列。索引项有序也就意味着，我们要查找关键字时，可以用折半，插值及斐波那契等有序查找算法。稠密索引文件的索引查找、更新都较方便，但由于索引项多，占用空间较大(见大话数据结构Page308 图8-5-2)</p><p><strong>分块索引</strong><br>由于稠密索引是因为索引项和数据集的记录个数相同，所以空间代价很大。如何减少索引项的个数呢？我们可以对数据集进行分块，使其分块有序，然后再对每一块建立一个索引项（类似于图书馆的分块）</p><p>分块有序是把数据集的记录分成了若干块，并且这些块需要满足两个条件：</p><blockquote><p>块内无序: 每一块内的记录不要求有序</p></blockquote><blockquote><p>块间有序:比如要求第二块所以记录的关键字均要大于第一块中所有记录的关键字，第三块要大于第二块。只有块间有序才有可能在查找时带来效率。</p></blockquote><p>对于分块有序的数据集，将每块对应一个索引项，这种索引方法叫做分块索引。</p><p>分块索引的索引项结构分为三个数据项：</p><ul><li>最大关键码–存储每一块中的最大关键字。</li><li>存储每一块中记录的个数以便于循环时使用。</li><li>用于指向块首数据元素的指针，便于开始对这一块中记录进行遍历。</li></ul><p><strong>倒排索引</strong><br>反向索引（inverted index）更熟悉的名字是倒排索引。</p><p>在搜索引擎中，用户输入关键字，如果正向索引，那么就需要扫描索引库中的所有文档，找出所有包含关键词文档，再根据打分模型进行打分，排出名次后呈现给用户。</p><p>由于索引库中的文件数目太大，正向索引无法满足能实时返回结果，因此搜索引擎会将正向索引重新构建为倒排索引，即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件。然后根据用户输入的关键字再去查找文档。</p><p>参考链接：<a href="https://blog.csdn.net/starzhou/article/details/87519973" target="_blank" rel="noopener">https://blog.csdn.net/starzhou/article/details/87519973</a></p><h3 id="5-二叉查找树"><a href="#5-二叉查找树" class="headerlink" title="5.二叉查找树"></a>5.二叉查找树</h3><p>二叉排序树(Binary Sort Tree)又称二叉查找树。它是一颗空树或者具有下列性质：</p><ul><li>若它的左子树不空，则左子树上的所有结点的值均小于它的根结构的值</li><li>若它的右子树不空，则右子树上的所有结点的值均大于它的根结构的值</li><li>它的左右子树也分别为二叉排序树</li></ul><p>构造一颗二叉树的目的并不是为了排序，而是为了提高查找和插入删除效率。</p><p><strong>二叉查找树的查找</strong><br>首先定义一个二叉树的结构</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二叉树的二叉链表结点结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BinaryNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BinaryNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span>rghild<span class="token punctuation">;</span><span class="token punctuation">}</span>BNode<span class="token punctuation">,</span><span class="token operator">*</span> BTree<span class="token punctuation">;</span></code></pre><p>然后实现二叉查找树</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*递归查找二叉查找树T中是否存在key*/</span><span class="token comment" spellcheck="true">/*指针f指向T的双亲，其初始调用值为NULL*/</span><span class="token comment" spellcheck="true">/*若查找成功，则指针p指向该元素结点，并返回true*/</span><span class="token comment" spellcheck="true">/*否则指针p指向查找路径上的最后一个结点并返回false*/</span><span class="token keyword">bool</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">,</span>BTree f<span class="token punctuation">,</span>BTree <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>p<span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在递归时才用到</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>p <span class="token operator">=</span>T <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">,</span>key<span class="token punctuation">,</span>T<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">,</span>key<span class="token punctuation">,</span>T<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>二叉查找树的查找次数最多不会超过树的深度，故取决于二叉树的形状。最好的情况是该树是完全二叉树，那么对于n个结点的完全二叉树深度为[log2 n]+1,那么查找的时间复杂度O(log n);最坏的情况是该树结点全在一边(串成条斜线)，查找的时间复杂度O(n),等同于顺序查找</p><p><strong>二叉查找树的插入</strong><br>二叉查找树的插入就是将关键字放到书中的合适位置</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*但二叉查找树T中不存哎关键字等于key的数据元素时*/</span><span class="token comment" spellcheck="true">/*插入key并返回true,否则返回false*/</span><span class="token keyword">bool</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTree p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//查找失败，树中没有key才能插入</span>    <span class="token punctuation">{</span>        BNode <span class="token operator">*</span><span class="token keyword">new</span><span class="token operator">=</span><span class="token punctuation">(</span>BNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">new</span><span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">=</span>key<span class="token punctuation">;</span>        <span class="token keyword">new</span><span class="token operator">-</span><span class="token operator">></span>lchild<span class="token operator">=</span><span class="token keyword">new</span><span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>            T<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//插入new为根结点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span>p<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>            p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            p<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由二叉查找树的插入可知，初始化一颗空二叉树，持续不断的调用二叉查找树的插入即可生成一颗二叉查找树</p><p><strong>二叉查找树的删除</strong></p><p>二叉查找树的删除相对于查找来说复杂一些，因为可能存在删除某个结点，而让这棵树变得不满足二叉查找树的特性。情况如下：</p><ul><li>叶子结点:直接删除结点</li><li>仅有左或右子树的结点：删除结点后将它的左或右子树整个移动到删除结点的位置</li><li>左右子树都有的结点：中序遍历找到要删除结点的直接前驱或后继s,用s代替要删除的结点，然后再删除s结点</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*若二叉查找树T中存在关键字等于key的数据元素时，删除该数据元素结点*/</span><span class="token keyword">bool</span> <span class="token function">DeleteBST</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>  <span class="token function">DeleteBST</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             <span class="token keyword">return</span>  <span class="token function">DeleteBST</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*实现Delete：从二叉查找树中删除结点p,并重接它的左或右子树*/</span><span class="token keyword">bool</span> <span class="token function">Delete</span><span class="token punctuation">(</span>BTree p<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTree q<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//右子树空，只需重接它的左子树</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//左子树空，只需重接它的右子树</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>  <span class="token comment" spellcheck="true">//左右子树都不为空</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token punctuation">;</span>s<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//转左，然后向右到尽头(找到待删除结点的中序遍历直接前驱)</span>        <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//同理，如果需要找找到待删除结点的中序遍历直接后继，则从当前结点先转一次右，然后向左到尽头</span>            q<span class="token operator">=</span>s<span class="token punctuation">;</span>s<span class="token operator">=</span>s<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">=</span>s<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//s指向被删除结点的直接前驱(见大话数据结构Page322)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">!=</span> p<span class="token punctuation">)</span>            q<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">=</span>s<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//重接q的右子树,注意理解此时s结点有2种情况：s为叶子结点或者s还有个左叶子。</span>                                  <span class="token comment" spellcheck="true">//因此需要将q的右子树指向s的左叶子，不然s的左叶子会丢失</span>        <span class="token keyword">else</span>            q<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token operator">=</span>s<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果p=q,说明s就是q的左子树的第一个结点，在q左边，重接q的左子树</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="6-平衡二叉树-AVL树"><a href="#6-平衡二叉树-AVL树" class="headerlink" title="6.平衡二叉树(AVL树)"></a>6.平衡二叉树(AVL树)</h3><p>前面提到二叉查找树的查找次数最多不会超过树的深度，取决于二叉树的形状。因此我们引入平衡二叉树。平衡二叉树(Self_Balancing Binary Tree),也称AVL树,是一种二叉查找树，其中每一个结点的左子树减去的右子树的高度差(称为平衡因子BF Balance Factor)的绝对值至多等于1。故BF取值只能为-1,0,1。</p><p>距离插入结点最近的，且平衡因子的绝对值大于1的结点为根的子树，我们称为最小不平衡子树</p><p><strong>平衡二叉树的实现原理</strong><br>平衡二叉树构建的基本思想就是在构建二叉排序树的过程中，每当插入一个结点时，先检查是否应插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉查找树特性的前提下，调整最小不平衡子树中各结点之间的链接关系，进行相应的旋转，使之称为新的平衡子树。</p><p>树的旋转规律：</p><ul><li>当最小不平衡子树根结点的平衡因子大于1,右旋</li><li>当最小不平衡子树根结点的平衡因子小于-1,左旋</li><li>插入结点后，最小不平衡子树的BF与它的子树的BF符号相反时，需要对它的子树先进行一次旋转(旋转方向取决于它的子树的BF)使得符号相同后，再反向旋转一次才能平衡操作(见大话数据结构Page334 图8-7-8)</li></ul><p><strong>平衡二叉树的实现算法</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二叉树的二叉链表结点结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BinaryNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">int</span> bf<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BNode<span class="token punctuation">,</span><span class="token operator">*</span>BTree<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*对以p为根的二叉排序树作右旋处理*/</span><span class="token comment" spellcheck="true">/*处理之后p指向新的树根结点，即旋转之前的左子树的根结点*/</span><span class="token comment" spellcheck="true">/*(见大话数据结构Page335 图8-7-9)*/</span><span class="token keyword">void</span> <span class="token function">R_Rotate</span><span class="token punctuation">(</span>BTree P<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTree L <span class="token operator">=</span>P<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// L指向P的左子树的根结点</span>    P<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// L的右子树挂接为P的左子树</span>    L<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">=</span>p<span class="token punctuation">;</span>             P<span class="token operator">=</span>L<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// P指向新的根结点</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*对以p为根的二叉排序树作左旋处理*/</span><span class="token comment" spellcheck="true">/*处理之后p指向新的树根结点，即旋转之前的左子树的根结点*/</span><span class="token comment" spellcheck="true">/*左旋与右旋完全对称*/</span><span class="token keyword">void</span> <span class="token function">L_Rotate</span><span class="token punctuation">(</span>BTree P<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTree R <span class="token operator">=</span>P<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// R指向P的右子树的根结点</span>    P<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">=</span>R<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R的左子树挂接为P的右子树</span>    R<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">=</span>p<span class="token punctuation">;</span>             P<span class="token operator">=</span>R<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// P指向新的根结点</span><span class="token punctuation">}</span></code></pre><p>下面是左平衡旋转处理的代码。左边不平衡分两种情况：</p><ul><li>在一个节点的左子树的左子树上插入一个新节点。即LL。在这种情况下，我们可以通过将节点右旋使其平衡,即LL单右旋操作。</li><li>在一个节点的左子树的右子树上插入一个新节点。即LR。在这种情况下，我们不能直接通过将节点左旋或右来使其平衡了。这里需要两步来完成，先让树中高度较低的进行一次左旋，这个时候就变成了LL了。再进行一次单右旋操作即可。即LR先左旋再右旋操作</li></ul><p>参考 <a href="https://blog.csdn.net/qq_36770641/article/details/82463229" target="_blank" rel="noopener">https://blog.csdn.net/qq_36770641/article/details/82463229</a></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> LH +1  </span><span class="token comment" spellcheck="true">/*左高*/</span><span class="token macro property">#<span class="token directive keyword">define</span> EH 0   </span><span class="token comment" spellcheck="true">/*等高*/</span><span class="token macro property">#<span class="token directive keyword">define</span> RH -1  </span><span class="token comment" spellcheck="true">/*右高*/</span><span class="token comment" spellcheck="true">/*对以BTree T所指结点为根的二叉树作左平衡旋转处理*/</span><span class="token comment" spellcheck="true">/*本算法结束时，指针T指向新的根结点*/</span><span class="token keyword">void</span> <span class="token function">LeftBalance</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BTree L<span class="token punctuation">,</span>Lr<span class="token punctuation">;</span>    L<span class="token operator">=</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// L指向T的左子树根结点</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>L<span class="token operator">-</span>bf<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> LH<span class="token operator">:</span>  <span class="token comment" spellcheck="true">// 节点的左子树的左子树，LL</span>            T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>            <span class="token function">R_Rotate</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> RH<span class="token operator">:</span>   <span class="token comment" spellcheck="true">//节点的左子树的右子树,LR</span>            Lr<span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Lr又分三种情况，Lr有左叶子，没有叶子，右叶子</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>Lr<span class="token operator">-</span>bf<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> LH<span class="token operator">:</span>                    T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>RH<span class="token punctuation">;</span>                    L<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> EH<span class="token operator">:</span>                    T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>RH<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RH<span class="token operator">:</span>                    T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                    L<span class="token operator">-</span>bf<span class="token operator">=</span>LH<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Lr<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>            <span class="token function">L_Rotate</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 对T的左子树作左旋平衡处理</span>            <span class="token function">R_Rotate</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 对T作右旋平衡处理</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主函数的实现代码如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 若在平衡的二叉排序树T中不存在和e有相同关键字的结点，则插入一个数据元素为e的新结点并返回1，否则返回0。</span><span class="token comment" spellcheck="true">// 若因插入而使二叉排序树失去平衡，则作平衡旋转处理，布尔变量taller反应T长高与否。</span><span class="token keyword">bool</span> <span class="token function">InsertAVL</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">,</span><span class="token keyword">bool</span> <span class="token operator">*</span>taller<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 插入新结点，树“长高”，置taller为true</span>        T<span class="token operator">=</span><span class="token punctuation">(</span>BTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T<span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>        T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token operator">=</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>        <span class="token operator">*</span>taller<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">==</span>T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 树中已存在和e有相同关键字的结点则不再插入</span>            <span class="token operator">*</span>taller<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">&lt;</span>T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 应继续在T的左子树中进行搜索</span>            <span class="token comment" spellcheck="true">// 未插入</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InsertAVL</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">,</span>e<span class="token punctuation">,</span>taller<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 已插入到T的左子树中且左子树“长高”</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>taller<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 检查平衡度</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 原本左子树比右子树高，需要作左平衡处理</span>                    <span class="token keyword">case</span> LH<span class="token operator">:</span>                        <span class="token function">LeftBalance</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 原本左右子树等高，现因左子树增高而树增高</span>                    <span class="token keyword">case</span> EH<span class="token operator">:</span>                        T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>LH<span class="token punctuation">;</span>                        <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 原本右子树比左子树高，现在左右子树等高</span>                    <span class="token keyword">case</span> RH<span class="token operator">:</span>                        T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                        <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 应继续在T的右子树中进行搜索</span>             <span class="token comment" spellcheck="true">// 未插入</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InsertAVL</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">,</span>e<span class="token punctuation">,</span>taller<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 已插入到T的右子树中且右子树“长高”</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>taller<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 检查平衡度</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 原本左子树比右子树高，现在左右子树等高</span>                    <span class="token keyword">case</span> LH<span class="token operator">:</span>                        T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                        <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 原本左右子树等高，现因右子树增高而树增高</span>                    <span class="token keyword">case</span> EH<span class="token operator">:</span>                        T<span class="token operator">-</span><span class="token operator">></span>bf<span class="token operator">=</span>RH<span class="token punctuation">;</span>                        <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 原本右子树比左子树高，需要作右平衡处理</span>                    <span class="token keyword">case</span> RH<span class="token operator">:</span>                        <span class="token function">RightBalance</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果我们需要查找的集合本身没有顺序，在频繁查找的同时也需要经常的插入和删除操作，显然我们需要构建一棵二叉排序树，但是不平衡的二叉排序树，查找效率是非常低的，因此我们需要在构建时，就让这棵二叉排序树是平衡二叉树，此时我们的查找时间复杂度就为O(logn)，而插入和删除也为O(logn)。这显然是比较理想的一种动态查找表算法。</p><h3 id="7-多路查找树-B树"><a href="#7-多路查找树-B树" class="headerlink" title="7.多路查找树(B树)"></a>7.多路查找树(B树)</h3><p>一个结点只能存储一个元素，在元素非常多的时候，就使得要么树的度非常大（结点拥有子树的个数的最大值），要么树的高度非常大，甚至两者都必须足够大才行。这就使得内存存取外存次数非常多，这显然成了时间效率上的瓶颈，这迫使我们要<strong>打破每一个结点只存储一个元素的限制</strong>，为此引入了多路查找树的概念。</p><p>多路查找树（muitl-way search tree），其<strong>每一个结点的孩子树可以多于两个，且每一个结点处可以存储多个元素</strong>。由于它是查找树，所有元素之间存在某种特定的排序关系。</p><p><strong>2-3树</strong><br>2-3树是这样的一棵多路查找树：其中的每一个结点都具有两个孩子（我们称它为2结点）或三个孩子(我们称它为3结点)(见大话数据结构Page344 图8-8-2)</p><p>一个2结点包含一个元素和两个孩子（或没有孩子），左子树包含的元素小于该元素，右子树包含的元素大于该元素。一个2结点要么没有孩子，要有就有两个，不能有一个孩子。（与二叉排序树的不同）。</p><p>一个3结点包含一小一大两个元素和三个孩子（或没有孩子），一个3结点要么没有孩子，要么就有3个孩子。如果某个3结点有孩子的话，左子树包含小于较小元素的元素，右子树包含大于较大元素的元素，中间子树包含介于两元素之间的元素。</p><p>并且2-3子树中所有的叶子都在同一层次上。</p><p>2-3树复杂的地方就在于新结点的插入和已有结点的删除。毕竟每个结点可能是2结点也可能是3结点，要保证所有叶子都在同一层次，是需要进行一番复杂操作的。</p><p>插入和删除参考 <a href="https://blog.csdn.net/disiwei1012/article/details/78900594" target="_blank" rel="noopener">https://blog.csdn.net/disiwei1012/article/details/78900594</a></p><p><strong>2-3-4树</strong><br>其实就是2-3树的概念扩展，包括了4结点的使用。一个4结点包含小中大三个元素和四个孩子（或没有孩子），一个4结点要么没有孩子，要么具有4个孩子。如果某个4结点有孩子的话，左子树包含小于最小元素的元素；第二子树包含大于最小元素、小于第二元素的元素；第三子树包含大于第二元素、小于最大元素的元素；右子树包含大于最大元素的元素。<br><strong>B树（B-树）</strong><br>B树（B-tree）是一种平衡的多路查找树，2-3树和2-3-4树都是B树的特例。结点最大的孩子数目称为B树的阶（order），因此，2-3树是3阶B树，2-3-4树是4阶B树。</p><p>一个m阶的B树具有如下属性：</p><p>●  如果根结点不是叶结点。则其至少有两颗子树；</p><p>●  每一个非根的分支结点都有k-1个元素和k个孩子，每一个叶子结点n都有k-1个元素；</p><p>●  所有叶子结点都位于同一层次；</p><p>●  所有分支结点包含下列信息数据：（n,A0,K1,A1,K2,A2,…,Kn,An），其中：Ki(i=1,2,…,n)为关键字，且Ki&lt;Ki+1(i=1,2,…,n-1)；Ai(i=0,2,…,n)为指向子树根结点的指针，且指针Ai-1所指子树中所有结点的关键字均小于Ki(i=1,2,…,n)，An所指子树中所有结点的关键字均大于Kn，n(≤n≤m-1)为关键字的个数(或n+1为子树的个数)(见大话数据结构Page350 图8-8-17)</p><p>在有限内存的情况下，每一次磁盘的访问我们都可以获得最大数量的数据。由于B树每结点可以具有比二叉树多得多的元素，所以与二叉树的操作不同，他们减少了必须访问结点和数据块的数量，从而提高了性能。可以说，B树的数据结构就是为内外存的数据交互准备的</p><p><strong>B+树</strong><br>B树是有缺陷的。对于树结构来说，我们都可以通过中序遍历来顺序查找树中的元素，这一切都是在内存中进行。可是在B树结构中，我们往返于每个结点之间也就意味着我们必须得在硬盘的页面之间多次访问</p><p>B+树是应文件系统所需而出的一种B树的变形树，注意严格意义上讲，它其实已经不是常规定义的树了。在B树中，每一个元素在该树中只出现一次，有可能在叶子结点上，也有可能在分支结点上。而在B+树中，出现在分支结点中的元素会被当作它们在该分支结点位置的中序后继者（叶子结点）中再次列出。另外，每一个叶子结点都会保存一个指向后一叶子结点的指针。(见大话数据结构Page353 图8-8-19)</p><p>一棵m阶的B+树和m阶的B树的差异在于：</p><p>●  有n棵子树的结点中包含有n个关键字；<br>●  所有的叶子结点包含全部关键字的信息，及指向含这些关键字记录的指针，叶子结点本身依关键字的大小自小而大顺序链接；<br>●  所有分支结点可以看成是索引，结点中仅含有其子树中的最大（或最小）关键字。<br>这样的数据结构最大的好处就在于，如果是要随机查找，我们就从根结点出发，与B树的查找方式相同，只不过即使在分支结点找到了待查找的关键字，它也只是用来索引的，不能提供实际记录的访问，还是需要到达包含此关键字的终端结点。</p><p>如果我们是需要从最小关键字进行从小到大的顺序查找，我们就可以从最左侧的叶子结点出发，不经过分支结点，而是延着指向下一叶子的指针就可遍历所有的关键字。B+树的结构特别适合带有范围的查找。们可以通过从根结点出发找到范围的最小值，然后再在叶子结点按顺序查找到符合范围的所有记录。</p><p>B+树的插入、删除过程也都与B树类似，只不过插入和删除的元素都是在叶子结点上进行而已</p><h3 id="8-散列表查找-哈希表"><a href="#8-散列表查找-哈希表" class="headerlink" title="8.散列表查找(哈希表)"></a>8.散列表查找(哈希表)</h3><p>我们只需要通过某个函数f，使得<strong>存储位置＝f（关键字）</strong>，那样我们可以通过查找关键字不需要比较就可获得需要的记录的存储位置。这就是一种新的存储技术——散列技术。</p><p>散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使得每个关键字key对应一个存储位置f(key)这里我们把这种对应关系f称为散列函数，又称为哈希（Hash）函数。采用散列技术将记录存储在一块连续的存储空间中，这块连续的存储空间称为散列表或哈希表（Hash table）。关键字对应的记录存储位置我们称为散列地址。</p><p>整个散列过程其实就是两步：</p><ol><li>在存储时，通过散列函数计算该记录的散列地址，并按此散列地址存储该记录</li><li>当查找记录时，我们通过同样的散列函数计算记录的散列地址，按此散列地址访问该记录</li></ol><p>散列技术既是一种存储方法，也是一种查找方法。它与线性表、树、图等结构不同的是，前面几种结构，数据元素之间都存在某种逻辑关系，可以用连线图示表示出来，而散列技术的记录之间不存在什么逻辑关系，它只与关键字有关联。因此，散列主要是面向查找的存储结构。</p><p>散列表不适合范围查找，散列表也不能排序和查找最值;对于同一个关键字对应很多记录也不适合散列表</p><p>总之设计一个简单、均匀、存储利用率高的散列函数是散列技术中最关键的问题。<br>我们时常会碰到两个关键字key1≠key2，但是却有f(key1)=f(key2)，这种现象我们称为冲突（collision），并把key1和key2称为这个散列函数的同义词（synonym）</p><p><strong>散列函数的构造方法</strong><br>散列函数呢？有两个原则可以参考：</p><ul><li>计算简单。你说设计一个算法可以保证所有的关键字都不会产生冲突，但是这个算法需要很复杂的计算，会耗费很多时间，这对于需要频繁地查找来说，就会大大降低查找的效率了。因此，散列函数的计算时间不应该超过其他查找技术与关键字比较的时间</li><li>散列地址分布均匀。尽量让散列地址均匀地分布在存储空间中，这样可以保证存储空间的有效利用，并减少为处理冲突而耗费的时间。</li></ul><p>下面是各种散列表构造方法：</p><ol><li>直接定址法<blockquote><p>取关键字的某个线性函数值为散列地址，即：f(key)=a×key+b（a、b为常数）<br>这样的散列函数优点就是简单、均匀，也不会产生冲突。但问题是这需要事先知道关键字的分布情况，适合查找表较小且连续的连续的情况。因此，在现实应用中，此方法虽然简单，但却并不常用</p></blockquote></li></ol><p>2.数字分析法</p><blockquote><p>抽取方法是使用关键字的一部分来计算散列存储位置的方法，通常适合处理关键字位数比较大的情况，如果事先知道关键字的分布且关键字的若干位分布较均匀，就可以考虑用这个方法</p></blockquote><p>3.平方取中法</p><blockquote><p>将关键字平方后再抽取中间几位。比较适合于不知道关键字的分布，而位数又不是很大的情况</p></blockquote><p>4.折叠法</p><blockquote><p>将关键字从左到右分割成位数相等的几部分（注意最后一部分位数不够时可以短些），然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址。折叠法事先不需要知道关键字的分布，适合关键字位数较多的情况</p></blockquote><p>5.除留余数法</p><blockquote><p>对于散列表长为m的散列函数公式为：f(key)=key mod p(p≤m)<br>该方法不仅可以对关键字直接取模，也可在折叠、平方取中后再取模。<br>本方法的关键就在于选择合适的p，p如果选得不好，就可能会容易产生同义词。根据经验，若散列表表长为m，通常p为小于或等于表长（最好接近m）的最小质数或不包含小于20质因子的合数</p></blockquote><p>6.随机数法</p><blockquote><p>选择一个随机数，取关键字的随机函数值为它的散列地址。也就是f(key)=random(key)。这里random是随机函数。当关键字的长度不等时，采用这个方法构造散列函数是比较合适的。</p></blockquote><p>总之，现实中，应该视不同的情况采用不同的散列函数。我们只能给出一些考虑的因素来提供参考： 1.计算散列地址所需的时间。 2.关键字的长度。 3.散列表的大小。 4.关键字的分布情况。 5.记录查找的频率。综合这些因素，才能决策选择哪种散列函数更合适。</p><p><strong>处理散列冲突的方法</strong></p><ol><li>开放定址法<blockquote><p>所谓的开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。它的公式是：fi(key)=(f(key)+di)MOD m(di=1,2,3,……,m-1)。我们把这种解决冲突的开放定址法称为线性探测法。</p></blockquote></li></ol><p>另外增加平方运算的目的是为了不让关键字都聚集在某一块区域。我们称这种方法为二次探测法。fi(key)=(f(key)+di)MOD m(di=1^2,-1^2,2^2,-2^2,…,q^2,-q^2,q≤m/2)</p><p>还有一种方法是，在冲突时，对于位移量di采用随机函数计算得到，我们称之为随机探测法。注意，这里的随机其实是伪随机数。伪随机数是说，如果我们设置随机种子相同，则不断调用随机函数可以生成不会重复的数列，我们在查找时，用同样的随机种子，它每次得到的数列是相同的，相同的di当然可以得到相同的散列地址。fi(key)=(f(key)+di)MOD m(di是一个随机数列)</p><ol start="2"><li><p>再散列函数法</p><blockquote><p>对于我们的散列表来说，我们可以事先准备多个散列函数。fi(key)=RHi(key)(i=1,2,…,k)这里RHi就是不同的散列函数，每当发生散列地址冲突时，就换一个散列函数计算，相信总会有一个可以把冲突解决掉。这种方法能够使得关键字不产生聚集，当然，相应地也增加了计算的时间。</p></blockquote></li><li><p>链地址法</p><blockquote><p>将所有关键字为同义词的记录存储在一个单链表中，我们称这种表为同义词子表，在散列表中只存储所有同义词子表的头指针。</p></blockquote></li></ol><p>对于关键字集合{12,67,56,16,25,37,22,29,15,47,48,34}，我们用前面同样的12为除数，进行除留余数法，可得到如下图结构，此时，已经不存在什么冲突换址问题，无论有多少个冲突，都只是在当前位置给单链表增加结点的问题。(见大话数据结构Page364 图8-11-1)链地址法对于可能会造成很多冲突的散列函数来说，提供了绝不会出现找不到地址的保障。当然，这也就带来了查找时需要遍历单链表的性能损耗。</p><ol start="4"><li>公共溢出区法<blockquote><p>为所有冲突的关键字建立了一个公共的溢出区来存放。在查找时，对给定值通过散列函数计算出散列地址后，先与基本表的相应位置进行比对，如果相等，则查找成功；如果不相等，则到溢出表去进行顺序查找。如果对于基本表而言，有冲突的数据很少的情况下，公共溢出区的结构对查找性能来说还是非常高的。</p></blockquote></li></ol><p><strong>散列表查找实现</strong><br>首先是需要定义一个散列表的结构以及一些相关的常数。其中HashTable就是散列表结构。结构当中的elem为一个动态数组。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 定义散列表长为数组的长度</span><span class="token macro property">#<span class="token directive keyword">define</span> HASHSIZE 12</span><span class="token macro property">#<span class="token directive keyword">define</span> NULLKEY -32768</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据元素存储基址，动态分配数组</span>    <span class="token keyword">int</span> <span class="token operator">*</span>elem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前数据元素个数</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span> HashTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 散列表表长，全局变量</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>有了结构的定义，我们可以对散列表进行初始化： </p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 初始化散列表</span><span class="token keyword">bool</span> <span class="token function">InitHashTable</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>H<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    m<span class="token operator">=</span>HASHSIZE<span class="token punctuation">;</span>    H<span class="token operator">-</span><span class="token operator">></span>count<span class="token operator">=</span>m<span class="token punctuation">;</span>    H<span class="token operator">-</span><span class="token operator">></span>elem<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>m <span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        H<span class="token operator">-</span><span class="token operator">></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>NULLKEY<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>为了插入时计算地址，我们需要定义散列函数，散列函数可以根据不同情况更改算法。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 散列函数</span><span class="token keyword">int</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 除留余数法</span>    <span class="token keyword">return</span> key<span class="token operator">%</span>m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化完成后，我们可以对散列表进行插入操作。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 插入关键字进散列表，插入整形</span><span class="token keyword">void</span> <span class="token function">InsertHash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 求散列地址</span>    <span class="token keyword">int</span> addr<span class="token operator">=</span><span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果不为空，则冲突</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>H<span class="token operator">-</span><span class="token operator">></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token operator">!=</span>NULLKEY<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 开放定址法的线性探测</span>        addr<span class="token operator">=</span><span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 直到有空位后插入关键字</span>    H<span class="token operator">-</span><span class="token operator">></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>散列表存在后，我们在需要时就可以通过散列表查找要的记录。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 散列表查找关键字</span><span class="token keyword">bool</span> <span class="token function">SearchHash</span><span class="token punctuation">(</span>HashTable H<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 求散列地址</span>    <span class="token operator">*</span>addr<span class="token operator">=</span><span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果不为空，则冲突</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span><span class="token operator">!=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开放定址法的线性探测</span>        <span class="token operator">*</span>addr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span><span class="token operator">==</span>NULLKEY<span class="token operator">||</span><span class="token operator">*</span>addr<span class="token operator">==</span><span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果循环回到原点</span>            <span class="token comment" spellcheck="true">// 则说明是关键字不存在</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>散列表查找性能分析</strong><br>如果没有 冲突，散列查找是我们本章介绍的所有查找中效率最高的，因为它的时间复杂度为O(1)。可惜，冲突是无法避免的。散列查找的平均长度取决于以下因素：</p><ol><li>散列表是否均匀。不过，由于不同的散列函数对同一组随机的关键字，产生冲突的可能性是相同的，因此我们可以不考虑它对平均查找长度的影响。</li><li>处理冲突的方法，比如线性探测处理冲突可能会产生堆积，显然就没有二次探测法好</li><li>散列表的装填因子，装填因子α=填入表中的记录个数/散列表长度。α标志着散列表的装满的程度。当填入表中的记录越多，α就越大，产生冲突的可能性就越大。故散列表的平均查找长度取决于装填因子，而不是取决于查找集合中的记录个数。</li></ol><p>不管记录个数n有多大，我们总可以选择一个合适的装填因子以便将平均查找长度限定在一个范围之内，此时我们散列查找的时间复杂度就真的是O(1)了。通常我们都将散列表的空间设置得比查找集合大，此时虽然是浪费了一定的空间，但换来的是查找效率的大大提升。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话数据结构学习笔记-图</title>
      <link href="/2019/12/20/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7.%E5%9B%BE/"/>
      <url>/2019/12/20/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7.%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="7-图"><a href="#7-图" class="headerlink" title="7 图"></a>7 图</h2><h3 id="1-图的基本知识"><a href="#1-图的基本知识" class="headerlink" title="1.图的基本知识"></a>1.图的基本知识</h3><p>图(Graph)是由顶点的<strong>有穷非空</strong>集合和顶点之间边的集合组成，通常表示为：G(V,E),其中，G表示一个图，V(Vertex)是图G中顶点的集合，E是图G中边的集合</p><ul><li>线性表中的数据元素称为元素，树中的数据元素称为结点，<strong>图中的数据元素称为顶点</strong></li><li>存在空表、空树，不存在空图，即<strong>图里必须有顶点</strong></li><li>线性表中，相邻的数据元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，<strong>在图中，任意两个顶点之间都可能有关系，顶点之间的关系用边来表示，边集可以是空的</strong></li></ul><p><strong>各种图的定义</strong><br>无向边(Edge):若顶点vi到vj之间的边没有方向，则称为无向边，用无序偶对(vi,vj)或者(vj,vi)表示</p><p>无向图(Undirected Graphs)：图中任意两个顶点之间的边都是无向边，则称该图为无向图</p><p>无向图表示如下：G1={V1,{E1}},其中V1={A,B,C,D};E1={(A,B),(B,C),(C,D),(D,A),(A,C)}(见大话数据结构Page214 图7-2-2)</p><p>有向边(Arc):若顶点vi到vj之间的边有方向，则称为有向边或者弧，用有序偶对&lt;vi,vj&gt;表示(不能交换顺序),vi称为弧尾(Tail),vj称为弧头(Head)</p><p>无向图(Directed Graphs)：图中任意两个顶点之间的边都是有向边，则称该图为有向图</p><p>无向图表示如下：G2={V2,{E2}},其中V2={A,B,C,D};E1={&lt;A,D&gt;,&lt;B,A&gt;,&lt;B,C&gt;,&lt;C,A&gt;}(见大话数据结构Page214 图7-2-3)</p><p>简单图：在图中，若不存在顶点到其自身的边且同一条边不重复出现，则称这样的图为简单图</p><p>无向完全图：在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。含有n个顶点的无向完全图有n*(n-1)/2条边</p><p>有向完全图：在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。含有n个顶点的有向完全图有n*(n-1)条边</p><p>稀疏图和稠密图：有很少条边或者弧的图称为稀疏图，反之称为稠密图。这是一个相对概念</p><p>权(Weight)：与图的边或者弧相关的数据称为权</p><p>网(Network):带权的图通常称为网</p><p>子图(Subgraph):假设有两个图G={V,{E}} 和G’={V’,{E’}},如果V’是V的子集，且E’是E的子集,则称G’为G的子图</p><p><strong>图的顶点与边的关系</strong><br>对于无向图G={V,{E}}如果边(v,v’)属于E,则称顶点v和v’互为邻接点(Adjacent),即v和v’相邻接。边(v,v’)依附(Incident)于顶点v和v’,或者说边(v,v’)与顶点v和v’相关联。顶点v的度(Degree)是和v相邻接的边的数目，记为TD(v)。无向图中，边数=各顶点度数之和的一半</p><p>对于有向图G={V,{E}}如果弧&lt;v,v’&gt;属于E,则称顶点v邻接到顶点v’，顶点v’邻接自顶点v。弧&lt;v,v’&gt;和顶点v和v’相关。以顶点v为头的弧的数目称为v的入度(InDegree)，记为ID(v);以顶点v为尾的弧的数目称为v的出度(OutDegree)，记为OD(v)。顶点v的度为TD(v)=ID(v)+OD(v)。有向图中，边数=各顶点入度之和=各顶点出度之和</p><p>顶点序列：无向图G={V,{E}}中从顶点v到顶点v’的路径(Path)是一个顶点序列(v=vi,0,vi,1,….,vi,m=v’)(见大话数据结构Page218)。图中顶点与顶点之间的路径不是唯一的。</p><p>路径的长度：路径上的边或弧的数目</p><p>第一个顶点到最后一个顶点相同的路径称为回路或环(Cycle)。序列中顶点不重复出现的路径称为简单路径。除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路称为简单回路或简单环(见大话数据结构Page219 图7-2-11)</p><p><strong>连通图相关术语</strong><br>连通：在无向图G中，如果从顶点v到顶点v’有路径，则称v和v是连通的</p><p>连通图：对于图中任意两个顶点都是连通的，则称图为连通图</p><p>连通分量：无向图中的极大连通子图称为连通分量</p><blockquote><p>要是子图<br>子图要是连通的<br>连通子图含有极大顶点数<br>具有极大顶点数的连通子图包含依附于这些顶点的所有边</p></blockquote><p>强连通图：在有向图中，如果对于任意两个顶点vi和vj(vi不等于vj)，从vi到vj和vj到vi都存在路径，则称G是强连通图。</p><p>强连通分量：有向图中的极大强连通子图称为有向图的强连通分量</p><p>生成树：无向图中连通且n个顶点n-1条边叫生成树。(见大话数据结构Page221 图7-2-14)</p><blockquote><p>如果一个图有n个顶点和小于n-1条边，则是非连通图<br>如果一个图有n个顶点和多余n-1条边，则是必定构成环<br>如果一个图有n个顶点和n-1条边，则不一定构成环</p></blockquote><p>有向树：有向图中一顶点入度为0其余顶点入度为1的叫有向树。一个有向图由若干棵有向树构成生成森林。</p><h3 id="2-图的抽象数据类型"><a href="#2-图的抽象数据类型" class="headerlink" title="2.图的抽象数据类型"></a>2.图的抽象数据类型</h3><p><strong>图的抽象数据类型</strong></p><pre class=" language-cpp"><code class="language-cpp">ADT 图<span class="token punctuation">(</span>Graph<span class="token punctuation">)</span>Data    顶点的有穷非空集合和边的集合Operation    <span class="token function">CreateGraph</span><span class="token punctuation">(</span><span class="token operator">*</span>G<span class="token punctuation">,</span>V<span class="token punctuation">,</span>VR<span class="token punctuation">)</span><span class="token operator">:</span>按照顶点集V和边弧集VR的定义构造图G    <span class="token function">DestoryGraph</span><span class="token punctuation">(</span><span class="token operator">*</span>G<span class="token punctuation">)</span>    <span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token operator">:</span>若图G中存在顶点u<span class="token punctuation">,</span>则返回图中的位置    <span class="token function">GetVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">:</span>返回图G中顶点v的值    <span class="token function">PutVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token operator">:</span>将图G中顶点v赋值value    <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token operator">:</span>返回顶点v的一个邻接顶点，若顶点在G中无邻接点返回空    <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token operator">:</span>返回顶点v相对于w的下一个邻接顶点，若w是v的最后一个邻接点则返回空    <span class="token function">InsertVex</span><span class="token punctuation">(</span><span class="token operator">*</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span>：在图G中增添新顶点v    <span class="token function">DeleteVex</span><span class="token punctuation">(</span><span class="token operator">*</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">:</span>删除图G中顶点v及其相关的弧    <span class="token function">InsertArc</span><span class="token punctuation">(</span><span class="token operator">*</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token operator">:</span>在图G中增添弧<span class="token operator">&lt;</span>v<span class="token punctuation">,</span>w<span class="token operator">></span><span class="token punctuation">,</span>若G是无向图，还需要增添对称弧<span class="token operator">&lt;</span>w<span class="token punctuation">,</span>v<span class="token operator">></span>    <span class="token function">DeleteArc</span><span class="token punctuation">(</span><span class="token operator">*</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token operator">:</span>在图G中删除弧<span class="token operator">&lt;</span>v<span class="token punctuation">,</span>w<span class="token operator">></span><span class="token punctuation">,</span>若G是无向图，还需要删除对称弧<span class="token operator">&lt;</span>w<span class="token punctuation">,</span>v<span class="token operator">></span>    <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token operator">:</span>深度优先遍历，在遍历过程中对每个顶点调用    <span class="token function">HFSTraverse</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token operator">:</span>广度优先遍历，在遍历过程中对每个顶点调用endADT</code></pre><h3 id="3-图的存储结构"><a href="#3-图的存储结构" class="headerlink" title="3.图的存储结构"></a>3.图的存储结构</h3><p><strong>邻接矩阵</strong></p><p>图的邻接矩阵(Adjacency Matrix)存储方式是用两个数组来表示图。一个一维数组存储图的顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。</p><p>设图G有n个顶点，则邻接矩阵是一个nxn的方阵，定义为arc[i][j]=1(当(vi,vj)或者&lt;vi,vj&gt;属于边的集合E时)，反之arc[i][j]=0。(见大话数据结构Page225 图7-4-2和图7-4-3)</p><p>无向图的性质：</p><blockquote><p>通过邻接矩阵能轻易判断两顶点是否有边无边<br>某个顶点的度，其实就是这个顶点vi在邻接矩阵中第i行的非零元素个数(或者元素之和，因为只有0 1两种)<br>求顶点vi的所有邻接点，就是遍历矩阵第i行的元素，arc[i][j]=1 对应的列指向的顶点就是vi的邻接点<br>无向图的邻接矩阵为对称矩阵</p></blockquote><p>有向图的性质：</p><blockquote><p>有向图的邻接矩阵不是对称矩阵<br>有向图分为入度和出度。出度和无向图的度计算方法一样；入度颠倒方向，即在邻接矩阵中第i列的非零元素个数<br>顶点vi的所有邻接点和无向图相同</p></blockquote><p>若G为网图，w(i,j)表示边(vi,vj)或弧&lt;vi,vj&gt;的权值，则当i=j时(主对角线)arc[i][j]=0；当边(vi,vj)或弧&lt;vi,vj&gt;属于E时，arc[i][j]=w(i,j);其余情况arc[i][j]=正无穷(见大话数据结构Page226 图7-4-4)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*图的邻接矩阵存储结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶点类型由用户定义</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边上的权值类型由用户定义</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXVEX 100; </span><span class="token comment" spellcheck="true">//最大顶点数，用户自定义</span><span class="token macro property">#<span class="token directive keyword">define</span> INFINITY 65535; </span><span class="token comment" spellcheck="true">//用65535代表正无穷</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    VertexType vexs<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶点表</span>    EdgeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//邻接矩阵，可以看作边表</span>    <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span>numEdges <span class="token comment" spellcheck="true">//图中当前的顶点数和边数</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span></code></pre><p>构造一个图，其实就是给顶点表和边表输入数据的过程，代码如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*建立无向网图的邻接矩阵表示*/</span><span class="token comment" spellcheck="true">/*对于n个顶点和e条边的无向网图的创建，时间复杂度O(n+n*n+e)，即O(n^2)*/</span><span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span> G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入顶点数和边数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-</span><span class="token operator">></span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输入顶点信息，建立顶点表</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//邻接矩阵初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            G<span class="token operator">-</span><span class="token operator">></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INFINITY<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//建立边表</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-</span><span class="token operator">></span>numEdges<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入边(vi,vj)的下标i,下标j和权值w:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token operator">-</span><span class="token operator">></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>w<span class="token punctuation">;</span>        G<span class="token operator">-</span><span class="token operator">></span>arc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token operator">-</span><span class="token operator">></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//无向图，对称矩阵</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>邻接表</strong><br>考虑到图G中的边数相对顶点数较少的情况，邻接矩阵结构的边表中存在极大空间浪费，因此引入邻接表。</p><p>在树的存储结构中，孩子表示法将结点存入数组，并对结点的孩子进行链式存储，不存在空间浪费问题，这个思路同样适用于图的存储。我们把这种数组和链表相结合的存储方法称为邻接表。</p><p>邻接表的生成办法：</p><ol><li>图中顶点用一个一位数组存储(也可以用单链表存储，数组更方便)，对于数组的每个元素,由data数据域和firstedge指针域(指向第一个邻接点的指针)</li><li>边表结点由adjvex邻接点域(存储某顶点的邻接点在顶点表中的下标)和next域(指向边表中下一个结点的指针)组成(见大话数据结构Page229 图7-4-6)</li></ol><p>邻接表的性质：</p><blockquote><p>某个顶点的度，查找这个顶点的边表中结点的个数<br>判断vi到vj是否存在边，遍历顶点vi的边表中adjvex是否有等于顶点Vj的下标j<br>求顶点的所有邻接点，遍历顶点vi的边表，得到adjvex域对应的顶点就是邻接点</p></blockquote><p>有向图的邻接表，我们以顶点为弧尾(出去的方向)来存储边表的；但为了便于确定顶点的入度或以顶点为弧头的弧，我们也可以建立有向图的逆邻接表(见大话数据结构Page230 图7-4-7)</p><p>带权值的网图，我们在边表结点定义中再增加一个weight的数据域(见大话数据结构Page230 图7-4-8)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*图的邻接表存储结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶点类型由用户定义</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边上的权值类型由用户定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> EdgeNode  <span class="token comment" spellcheck="true">//边表结点</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//邻接点域，存储该顶点对应的下标</span>    EdgeType weight<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储权值，非网图不需要</span>    <span class="token keyword">struct</span> EdgeNode <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//链域。指向下一个邻接点</span><span class="token punctuation">}</span>EdgeNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> VertexNode <span class="token comment" spellcheck="true">//顶点表结�����</span><span class="token punctuation">{</span>    VertexType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶点域，存储顶点信息</span>    EdgeNode <span class="token operator">*</span> firstedge<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//边表头指针</span><span class="token punctuation">}</span>VertexNode<span class="token punctuation">,</span>AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    AdjLIst adjList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于 struct VertexNode adjList[MAXVEX]</span>    <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span>numEdges <span class="token comment" spellcheck="true">//图中当前的顶点数和边数</span><span class="token punctuation">}</span>GraphAdjList<span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*建立图的邻接表结构*/</span><span class="token comment" spellcheck="true">/*对于n个顶点和e条边的图，时间复杂度O(n+e)*/</span><span class="token keyword">void</span> <span class="token function">CreateALGraph</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span> G<span class="token punctuation">)</span><span class="token punctuation">{</span>    EdgeNode <span class="token operator">*</span>e<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入顶点数和边数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-</span><span class="token operator">></span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输入顶点信息，建立顶点表</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将边表置为空表</span>    <span class="token comment" spellcheck="true">//建立边表</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-</span><span class="token operator">></span>numEdges<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入边(vi,vj)的顶点序号:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*一条边对应两个顶点，使用头插法针对i和j分别进行插入*/</span>        <span class="token comment" spellcheck="true">/*比如输入(v1，v2),则在顶点1对应的边表中插入邻接点2，在顶点2对应的边表中插入邻接点1*/</span>        e<span class="token operator">=</span><span class="token punctuation">(</span>EdgeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token operator">=</span>j<span class="token punctuation">;</span>        e<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>G<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>        G<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token operator">=</span>e<span class="token punctuation">;</span>         e<span class="token operator">=</span><span class="token punctuation">(</span>EdgeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token operator">=</span>i<span class="token punctuation">;</span>        e<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>G<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>        G<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token operator">=</span>e<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>十字链表</strong><br>对于有向图来说，邻接表是有缺陷的。如果关心了出度，想了解入度就必须遍历整个图才知道，反之逆邻接表解决了入度但解决不了出度问题。我们采用一种将其整合的方法，这就是图的十字链表存储(Orthogonal List)</p><p>重新定义顶点表结点结构如下：data指向数据域，firstin表示入边表头指针，指向该顶点的入边表中的第一个结点；firstout表示出边表头指针，指向该顶点的出边表中的第一个结点</p><p>重新定义边表结点结构如下：tailvex表示弧起点在顶点表中的下标，headvex表示弧终点在顶点表中的下标，headlink表示入边表指针域，指向终点相同的下一条边，taillink表示出边表指针域，指向起点相同的下一条边。如果是网，还可以增加一个weight域来存储权值(见大话数据结构Page234 图7-4-10)</p><blockquote><p>firstout和taillink水平方向(顶点v出去的结点)<br>firstin和headlink竖直方向(顶点v进来的结点)</p></blockquote><p>总结：十字链表把邻接表和逆邻接表整合在一起，即容易找到以vi为尾的弧，也容易找到以vi为头的弧，因而容易求得顶点的出度和入度。虽然结构相对复杂，但创建图算法的时间复杂度和邻接表相同，因此很适合于有向图</p><p><strong>邻接多重表</strong><br>虽然邻接表是无向图的存储结构里不错的选择(关注的重点是顶点)；但如果我们更关注边的操作，如对已访问过的边做标记或者删除某一边时则比较麻烦。如删除某条边则需要对边表中的两个不在同一行的结点进行删除操作</p><p>我们仿照十字链表的方式，对边表结点结构进行改造，ivex和jvex是与某条边依附的两个顶点在顶点表中下标，ilink指向依附顶点ivex的下一条边，jlink指向依附顶点jvex的下一条边。这就是邻接多重表结构。(见大话数据结构Page236 图7-4-13)</p><blockquote><p>ilink指向的结点的jvex一定要和它本身的ivex值相同</p></blockquote><p>邻接多重表和邻接表的区别：同一条边，邻接多重表只有一个结点。如删除某边，只需将链接指向空</p><p><strong>边集数组</strong><br>边集数组是由两个一维数组构成。一个是存储顶点的信息；另一个是存储边的信息，这个边数组中每个数据元素由一条边的起点下标(begin)、终点下标(end)和权值(weight)组成。(见大话数据结构Page237 图7-4-14)</p><p>边集数组关注的是边的集合，在边集数组中查找一个顶点的度需要扫描整个数组，效率不高，因此更适合对边依次进行处理的操作。</p><h3 id="4-图的遍历"><a href="#4-图的遍历" class="headerlink" title="4.图的遍历"></a>4.图的遍历</h3><p>从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问依次的过程称为图的遍历</p><p><strong>深度优先遍历</strong></p><p>深度优先遍历(Depth_First_Search)也称深度优先搜索，简称DFS。</p><p>深度优先遍历其实就是一个递归的过程，它从图中某个顶点v出发，访问此顶点，然后从v的未被访问的邻接点出发深度优先遍历图，直到图中所有和v有路径相通的顶点都被访问。若图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作为起始点，重复上述过程，直到图中所有顶点都被访问(见大话数据结构Page239 图7-5-2)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> visited<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//访问标志的数组</span><span class="token comment" spellcheck="true">/*邻接矩阵的深度优先递归算法*/</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印顶点，也可以其他操作</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对未访问的邻接顶点递归调用</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*邻接矩阵的深度遍历操作*/</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始状态所有顶点都是未访问过的状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对所有未访问过的顶点调用DFS,若是连通图，只会执行一次   </span><span class="token punctuation">}</span></code></pre><p>如果图是邻接表结构，其DFSTraverse函数代码几乎相同，只是在递归函数中将数组换成了链表。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> visited<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//访问标志的数组</span><span class="token comment" spellcheck="true">/*邻接表的深度优先递归算法*/</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span> GL<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    EdgeNode <span class="token operator">*</span> p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印顶点，也可以其他操作</span>    p<span class="token operator">=</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对未访问的邻接顶点递归调用</span>        p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*邻接表的深度遍历操作*/</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span> GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始状态所有顶点都是未访问过的状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对所有未访问过的顶点调用DFS,若是连通图，只会执行一次   </span><span class="token punctuation">}</span></code></pre><p>总结：对于n个顶点e条边的图来说，邻接矩阵的DFS时间复杂度O(n^2),邻接表的DFS时间复杂度O(n+e);故对于顶点多边数少的稀疏图来说，邻接表结构DFS效率更高。对于有向图而言，由于只是通道存在可行或不可行，算法上没有区别</p><p><strong>广度优先遍历</strong><br>广度优先遍历(Breadth_First_Search),又称广度优先搜索，简称BFS。如果说图的深度优先遍历类似于树的前序遍历，那么图的广度优先遍历类似于树的层序遍历(见大话数据结构Page242 图7-5-3)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*邻接矩阵的广度优先遍历算法*/</span><span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    Queue Q<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化一辅助 队列</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始状态所有顶点都是未访问过的状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对每一个顶点做循环</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若未访问过就处理</span>        <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置当前结点访问过</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印顶点，也可以其他操作</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将此顶点入列</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//若当前队列不为空</span>            <span class="token punctuation">{</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将队列中元素出列，赋值给i</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断其他顶点，若与当前顶点(出队的顶点)存在边且未被访问过</span>                    <span class="token punctuation">{</span>                        visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将找到的此顶点标记为已访问过</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打印顶点</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将找到的此顶点入列</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*邻接表的广度优先遍历算法*/</span><span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span> GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    Queue Q<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化一辅助 队列</span>    EdgeNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始状态所有顶点都是未访问过的状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若未访问过就处理</span>        <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置当前结点访问过</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印顶点，也可以其他操作</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将此顶点入列</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//若当前队列不为空</span>            <span class="token punctuation">{</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">=</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstdege<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到当前顶点边表链表头指针</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adivex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若此顶点未被访问</span>                    <span class="token punctuation">{</span>                        visited<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将此顶点入列</span>                    <span class="token punctuation">}</span>                    p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指针指向下一个邻接点</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>总结：图的广度优先遍历算法时间复杂度和深度遍历相同，不同之处仅仅在于对顶点访问的顺序不同。<br><strong>深度优先遍历(DFS)是访问当前顶点的下一个邻接点，然后递归该过程，广度优先遍历(BFS)则是依次访问顶点的所有邻接点，再访问它的下一个邻接点的所有邻接点</strong>。假设顶点A有3个邻接点BCD,B有邻接点E。则DFS访问顺序：A B E再返回访问C D;BFS访问顺序：A BCD E。最后，深度优先更适合目标比较明确，以找到目标为主要目的的情况；而广度优先更适合再不断扩大遍历范围时找到相对最优解的情况。</p><h3 id="5-最小生成树"><a href="#5-最小生成树" class="headerlink" title="5.最小生成树"></a>5.最小生成树</h3><p>一个连通图的生成树是一个极小的连通子图，它含有图中所有的顶点，但只有足以构成树的n-1条边，我们把构造连通图的最小代价生成树称为最小生成树(Minimum Cost Spanning Tree)。找连通图的最小生成树的经典算法有两种，普里姆算法和克鲁斯卡尔算法。</p><p><strong>普里姆(Prim)算法</strong><br>普里姆算法是从点的方面考虑构建一颗MST，大致思想是：</p><ol><li>设图的顶点集合为U,首先任选一顶点a,将该点加入集合V;</li><li>再从集合U-V(差集)中找到另一顶点b使得顶点b到V中任意一点的权值最小，此时把顶点b加入集合，现在的集合V={a,b};</li><li>再从集合U-V中找到另一顶点c使得顶点c到V中任意一点的权值最小，此时把顶点c加入集合;重复上诉过程，直到所有顶点全部被加入V中，此时就构建了一颗MST。(除第一个顶点外，每次向集合中加入一个顶点就意味着找到一条MST的边)</li></ol><p>prim算法最小生成树,代码详细分析(见大话数据结构Page249 250)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*prim算法最小生成树*/</span><span class="token comment" spellcheck="true">/*时间复杂度O(n^2)*/</span><span class="token comment" spellcheck="true">/*只能用于无向图*/</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Prim</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示以i为终点的边的最小权值，也可以再添加定义一个生成树的总长len变量</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示对应lowcost[i]的起点</span>    adjvex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化第一个顶点下标为0</span>    lowcost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//；lowcost[i]=0表示顶点i已加入最小生成树</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//循环除下标为0的全部顶点</span>    <span class="token punctuation">{</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将v0顶点与之有边的权值存入数组</span>        adjvex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化都为v0的下标</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造最小生成树</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//循环除下标为0的全部顶点</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> min<span class="token operator">=</span>INFINITY<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用来找到一定范围内的最小权值，初始化最小权值为无穷大，通常设置为65535</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//j顶点下标循环的变量，k存储最小权值的顶点下标</span>        <span class="token comment" spellcheck="true">//找到当前顶点集合中的下一个权值最小的顶点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环全部顶点</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果权值不为0且权值小于min</span>            <span class="token punctuation">{</span>                min<span class="token operator">=</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让当前权值称为最小值</span>                k<span class="token operator">=</span>j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将当前最小值的下标存入k</span>            <span class="token punctuation">}</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d)"</span><span class="token punctuation">,</span>adjvex<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打印当前顶点中权值最小边,如adjvex[5]=1,打印结果为(1,5)。表示v1到v5为最小生成树的一条边</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//示顶点k已加入最小生成树</span>        <span class="token comment" spellcheck="true">//更新 加入新顶点的构成的新集合中导致的lowcost和adjvex数组值变化</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//若下标为k顶点与各边权值小于此前这些顶点未被加入生成树权值</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//例如最开始，v0和v2没有边，v1和v2有边，则lowcost[2]最开始为INFINITY,现在更新其值为G.arc[k][2]</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将较小权值存入lowcost</span>                adjvex<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//将下标为k的顶点存入adjvex</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>克鲁斯卡尔算法</strong><br>克鲁斯卡尔算法(Kruskal)基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路。具体做法：首先构造一个只含n个顶点的森林(将图的所有边去掉，只剩顶点)，然后按照权值大小从连通图中选择边加入森林，并使森林不产生回路，直到森林变成一棵树(所有顶点连接在一起并且没有环路)为止。</p><p>从上面的过程我们知道两个关键问题。第一个问题是：对图的所有边按照权值大小进行排序，这个采用排序算法即可；第二个问题是：将边添加到最小生成树时，怎么判断是否形成回路，这里采取的方法是：记录顶点在当前最小生成树中的终点(在最小生成树中与它连通的最大顶点)，然后每次添加一条边到当前最小生成树时，判断该边的两个顶点的终点是否重合。如，边AB BC CD,A B C的终点都是D,此时将边AC加入生成树中就会形成环。</p><p>我们采用边集数组结构来实现该算法。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*边集数组Edge结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span>Edge<span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*Kruskal算法生成最小生成树*/</span><span class="token comment" spellcheck="true">/*此算法Find函数时间复杂度O(log e),总体时间复杂度O(eloge)*/</span><span class="token comment" spellcheck="true">/*MAXEDGE为原图的边的最大数量，MAXVEX为原图的顶点个数最大值*/</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Kruskal</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    Edge edges<span class="token punctuation">[</span>MAXEDGE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义边集数组</span>    <span class="token keyword">int</span> parent<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一数组用来判断边与边是否形成回路</span>    <span class="token comment" spellcheck="true">/*此处省略将邻接矩阵G转化为边集数组edges并按照权值从小到大排序的代码*/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化数组值为0；</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环每一条边</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//假如n与m不等，则说明此边没有与现有生成树形成环</span>        <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span>m<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将此边的结尾顶点放入下标为起点的parent中，表示此顶点已经在生成树集合中</span>            <span class="token comment" spellcheck="true">//表示从顶点n可以走到顶点m，但并不表示顶点n与顶点m用一条边连接，中间可能会经过其他边</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d) %d"</span><span class="token punctuation">,</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">,</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//查找连线顶点的尾部下标</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//parent[f]=0表示该顶点继续往下走没有路了，即终点。</span>        f<span class="token operator">=</span>parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比如，f=0;parent[0]=1;parent[1]=0;则说明0可以走到1，1目前是终点</span>                        <span class="token comment" spellcheck="true">//当f=0传进来，parent[0]>1,说明未到终点，更新f=parnet[f]=1,即走到下一个点，然后继续判断循环，直到走到终点</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述代码结合例子具体分析(见大话数据结构Page254-256)或参考链接 <a href="https://blog.csdn.net/junya_zhang/article/details/83584592" target="_blank" rel="noopener">https://blog.csdn.net/junya_zhang/article/details/83584592</a></p><p>总结：对比两个算法,克鲁斯卡尔算法主要是针对边来展开，边数少时效率非常高，所以对于稀疏图有很大优势，而普里姆算法对于稠密图，即边数非常多的情况会更好</p><h3 id="6-最短路径"><a href="#6-最短路径" class="headerlink" title="6.最短路径"></a>6.最短路径</h3><p>对于非网图来说，最短路径：两顶点之间经过的边数最少的路径。非网图可以理解为所有边上权值都为1的网图</p><p>对于网图来说，最短路径：两顶点之间经过的边数上权值之和最少的路径。我们称路径上的第一个顶点是源点，最后一个顶点是终点</p><p><strong>迪杰斯特拉算法(Dijkstra)</strong><br>迪杰斯特拉算法的基本思想是：每次找到距离源点权值最小的一个顶点，然后以该顶点为中心扩展，最终得到源点到其他所有点的最短路径</p><blockquote><p>迪杰斯特拉算法只适用于图中无负权值边</p></blockquote><p>基本操作步骤：</p><ul><li><p>将所有顶点分为两部分：已知最短路径的顶点集合P和位置最短路径的顶点Q。最开始只有源点在集合P中，用一个数组book[i]来记录哪些顶点在集合P中，book[i]为1表示顶点在集合P中，为0表示顶点在集合P中</p></li><li><p>设源点s到自己的最短路径dis=0。若存在有源点能直接到达的顶点i,则把dis[i]设为arc[s][i];同时把其他(源点不能直接到达的顶点)顶点最短路径设为无穷大。</p></li><li><p>在集合Q的所有顶点中选择一个距离源点s最近的顶点，假设为u(即dis[u]最小)加入集合P。然后考察所有以顶点u为起点的边，对每一条边进行松弛操作。例如存在一条边(u,v),那么可以通过将边(u,v)添加到尾部来扩展一条从s-&gt;v的路径,路径的长度等于dis[u]+arc(u,v);如果该值比当前的dis[v]小，则用该值代替dis[v]的值。</p></li><li><p>重复第三步，若集合Q为空，算法结束。最终dis数组的值就是源点到所有顶点的最短路径</p></li></ul><p>伪代码如下：</p><pre class=" language-cpp"><code class="language-cpp">清除所有点的标号；设d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>其他d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>INFINITY<span class="token punctuation">;</span>循环n次<span class="token punctuation">{</span>    在所有未标号顶点中，选出d值最小的顶点x<span class="token punctuation">;</span>    给顶点x标记    对于从x出发的所有边<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>更新d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>arc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span>  MAXVEX 10</span><span class="token macro property">#<span class="token directive keyword">define</span> INFINITY 65535</span><span class="token keyword">int</span> Path<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储最短路径下标的数组</span><span class="token keyword">int</span> Dis<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//源点到各顶点的最短路径之和</span><span class="token comment" spellcheck="true">/*Dijkstra算法，求有向图G的v顶点到其余顶点i最短路径P[i]及带权长度D[i]*/</span><span class="token comment" spellcheck="true">/*P[i]的值为前驱顶点下标，D[i]表示v到vi的最短路径长度和*/</span><span class="token comment" spellcheck="true">/*时间复杂度O(n^2)*/</span><span class="token keyword">void</span>  <span class="token function">ShortestPath_Dijkstra</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">bool</span> book<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示是否已经计算出v0到v点的最短路径</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span>  i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化</span>    <span class="token punctuation">{</span>        book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        Dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将与v点有边的顶点加上权值</span>        Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//源点到源点路径为0</span>    book<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//主循环，每次求得v到第i个顶点的最短路径</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//(源点为0,求第1个到i-1个)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> min<span class="token operator">=</span>INFINITY<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前所知离v顶点的最短距离</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//寻找离v最近的顶点</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> Dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                k<span class="token operator">=</span>j<span class="token punctuation">;</span>                min<span class="token operator">=</span>Dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        book<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将当前找到的顶点标记</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//修正(松弛)与当前顶点k形成边的其他顶点的最短路径</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> Dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>Dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                Path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Dijkstra算法与Prim算法比较：</p><ul><li><p>Dijkstra是求一顶点到另一个顶点的最短距离，如从v0点到其他任意点的距离；Prim算法是最小生成树的算法，比如N个点之间怎么连通距离最短</p></li><li><p>二者不同之处在于”权值最低的判断方式不同”。Dijkstra算法的权值最低是相对于v0而言，也就是每次寻找未被标记的点集合中(U-V)和v0距离最小的点；Prim算法的权值最低是相对于已经找到的点的集合(视作一个整体,V)，也就是每次寻找未被标记的点集合中(U-V)和集合V中(即跟集合V中任意一点的距离)距离最小的点</p></li></ul><p>比如四个顶点(v0, v1, v2, v3)和四条边且边值定义为(v0, v1)=20, (v0, v2)=10, (v1, v3)=2, (v3, v2)=15的图，用Prim算法得到的最小生成树中v0跟v1是不直接相连的，也就是在最小生成树中v0v1的距离是v0-&gt;v2-&gt;v3-&gt;v1的距离是27，而用Dijkstra算法得到的v0v1的距离是20，也就是二者直接连线的长度。</p><p><strong>弗洛依德算法(Floyd)</strong><br>弗洛依德算法的核心思想：最开始只能经过0号顶点进行中转，接下来只能经过0和1号顶点中转，直到0与n-1号(所有顶点)中转</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> Path<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> Dis<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*Floyd算法，求网图G中各顶点v到其余顶点w最短路径P[i][j]及带权长度D[i][j]*/</span><span class="token comment" spellcheck="true">/*时间复杂度O(n^3)*/</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Floyd</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化Dis与Path</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Dis[i][j]即为对应点间的权值</span>            Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//k:中转顶点下标；i:起始顶点下标；j:结束顶点下标</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>Dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>Dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果经过下标为k顶点路径比原两点间路径更短</span>                    <span class="token comment" spellcheck="true">//将当前两点间权值设为更小的一个</span>                    Dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>Dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//路径设置经过下标为k的顶点</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由计算出的的Path二位数组如何得到具体的最短路径呢。举例如下：以v0到v8为例，Path[0][8]=1,得到要经过顶点v1;然后将1取代0得到Path[1][8]=2,说明要经过v2;<br>然后将2取代1得到Path[2][8]=4,说明要经过v4；然后将4取代2得到Path[4][8]=3,说明要经过v3，直到最后经过v8。最终得出v0到v8的最短路径为：v0 v1 v2 v4 … v8</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*图中所有点的最短路径的显示代码*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"v%d-v%d weight: %d"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>Dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span>Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得第一个路径顶点下标</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" path: %d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打印源点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">!=</span> j<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//如果路径顶点下标不是终点</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -> %d"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打印路径顶点</span>            k<span class="token operator">=</span>Path<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得下一个路径顶点下标</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -> %d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印终点</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Dijkstra算法与Floyd算法区别</strong></p><ul><li>Dijkstra算法是求一个顶点到其他所有顶点的最短路径(单源最短路)，Floyd算法是求任意两点之间的距离(多源最短路)</li><li>Dijkstra算法不能计算带负权值的图，Floyd算法可以计算带负权值的图，但不能计算负权值的环</li><li>Dijkstra算法时间复杂度O(n^2),Floyd算法时间复杂度O(n^3)</li><li>Dijkstra算法属于贪心算法，Floyd算法属于动态规划<h3 id="7-拓扑排序"><a href="#7-拓扑排序" class="headerlink" title="7.拓扑排序"></a>7.拓扑排序</h3>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们成为AOV网(Activity On Vertex Network)(AOV网中不能存在环)</li></ul><p>设G=(V,E)是一个具有n个顶点的有向图，V中的顶点序列v1,v2,…,vn,满足若从顶点vi到vj有一条路径，则在顶点序列中顶点vi必在顶点vj之前。我们称这样的顶点序列为一个拓扑序列。一个AOV网的拓扑序列不止一个。</p><p>拓扑排序，其实就是对一个有向图构造拓扑序列的过程。如果此网的全部顶点都被输出，则说明它是不存在环的AOV网，反之说明该网存在环，不是AOV网</p><p>拓扑排序的思路：从AOV网中选择一个入度为0的顶点输出，然后删除此顶点和此顶点指出的弧，继续重复此步骤，直到输出全部顶点或者AOV网中不存在入度为0的顶点为止</p><p>根据拓扑排序的思路我们可知，需要删除顶点，故用邻接表会更方便。因此我们建立一个邻接表。考虑到算法过程中始终需要查找入度为0的顶点，我们再原来的顶点表结构中，增加一个入度域in(in就是入度的数字)(见大话数据结构Page273 图7-8-2,代码分析见大话数据结构Page275 276)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*拓扑排序的邻接表结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> EdgeNode  <span class="token comment" spellcheck="true">//边表结点</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//存储该顶点对应的下标</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">struct</span> EdgeNode <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向下一个邻接点</span><span class="token punctuation">}</span>EdgeNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> VertexNode  <span class="token comment" spellcheck="true">//顶点表表结点</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> in<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//顶点入度   </span>    <span class="token comment" spellcheck="true">//避免每次查找时都需要遍历顶点表找有没有入度为0的顶点，属于空间换时间</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//顶点存储的信息</span>    EdgeNode <span class="token operator">*</span> firstedge<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶点指向的邻接边的边表头指针</span><span class="token punctuation">}</span>VertexNode<span class="token punctuation">,</span>AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    AdjList adjlist<span class="token punctuation">;</span>    <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span>numEdges<span class="token punctuation">;</span><span class="token punctuation">}</span>GraphAdjList<span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*AOV网的拓扑排序*/</span><span class="token comment" spellcheck="true">/*对一个具有n个顶点e条弧的AOV网/*/*扫描顶点表并入栈O(n),while循环中每个顶点先进后出栈执行了e此，整体时间复杂度O(n+e)*/</span><span class="token keyword">bool</span> <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span> GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    EdgeNode <span class="token operator">*</span> e<span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶下标</span>    <span class="token keyword">int</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计输出顶点的个数</span>    <span class="token keyword">int</span> <span class="token operator">*</span> stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用栈存储度为0的顶点</span>    stack <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>in <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将入度为0的点按顺序入栈</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> gettop<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//++top对应top--;top++对应(top-1)--,举例分析即可</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d -> "</span><span class="token punctuation">,</span>GL <span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印此顶点</span>        count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计输出顶点数</span>        <span class="token comment" spellcheck="true">//对此顶点的边表遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span>GL<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>e <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>e<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> k<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">--</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将此顶点的邻接点k的入度减1</span>                stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//若为0则入栈，以便于下次循环输出</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果count小于顶点数，说明存在环</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="8-关键路径"><a href="#8-关键路径" class="headerlink" title="8.关键路径"></a>8.关键路径</h3><p>在一个表示工程的有向图中，用顶点表示事件，用弧表示活动，用弧上的权值表示活动的持续时间，这样的有向图的弧表示活动的网，我们成为AOE网(Activity On Edge Network)</p><p>我们把AOE网中没有入边的顶点称为始点或源点，没有出边的顶点称为终点或汇点。一般情况下，AOE网只有一个源点和一个汇点。如顶点v0,v1分别表示事件，弧&lt;v0,v1&gt;表示一个活动，弧上的权值a1=3表示活动持续时间</p><p>AOE网用来表示工程流程，故具有明显的工程特性。如在某顶点所代表的事件发生后，从该顶点出发的活动才能开始；只有在进入某顶点的各个活动都已结束，该顶点所代表的事件才能发生。</p><p>AOV网时顶点表示活动的网，它只描述活动间的制约关系，而AOE网是用边表示活动的网，其权值表示活动的持续时间。因此AOE网是要建立在活动之间制约关系没有矛盾的基础之上，再来分析整个工程至少需要多少事件或为了缩短完成工程所需事件而怎么优化。</p><p>路径上各个活动所持续时间之和称为路径长度，从<strong>源点到汇点具有最大长度的路径叫关键路径</strong>，在关键路径上的活动叫关键活动。</p><p>我们定义下如下参数：</p><ol><li>事件的最早发生时间 etv(earliest time of vertex):顶点v的最早发生时间</li><li>事件的最晚发生时间 ltv(latest time of vertex)：顶点v的最晚发生时间</li><li>活动的最早开工时间 ete(earliest time of edge)：弧a的最早开工时间</li><li>活动的最晚开工时间 lte(latest time of edge)：弧a的最晚开工时间<br>我们可以由1、2求得3、4，再根据ete[k]和lte[k]相等来判断a是否是关键活动</li></ol><p><strong>关键路径算法</strong><br>由于AOE网带权值，故邻接表结构里Edge结点增加了weight域来存储弧的权值(见大话数据结构Page281)。在求关键路径之前，需要调用依次拓扑序列算法的代码来计算etv和拓扑序列表。计算顶点vk即求etv[k]的最早发生时间(见大话数据结构Page283 图7-9-5)。比如已求得顶点v0对应的etv[0]=0,顶点v1对应的etv[1]=3,顶点v2对应的etv[2]=4,现在我们需求顶点v3对应的etv[3]。方法是计算：etv[3],etv[1]+len&lt;v1,v3&gt;,etv[2]+len&lt;v2,v3&gt;中的最大值</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>etv<span class="token punctuation">,</span><span class="token operator">*</span>ltv<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//事件最早发生时间和最迟发生时间数组</span><span class="token keyword">int</span> <span class="token operator">*</span> stack2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于存储拓扑序列的栈</span><span class="token keyword">int</span> top2<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//用于stack2的指针</span><span class="token comment" spellcheck="true">/*拓扑排序，用于关键路径计算*/</span><span class="token keyword">bool</span> <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span> GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    EdgeNode <span class="token operator">*</span> e<span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶下标</span>    <span class="token keyword">int</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计输出顶点的个数</span>    <span class="token keyword">int</span> <span class="token operator">*</span> stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用栈存储度为0的顶点</span>    stack <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>in <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将入度为0的点按顺序入栈</span>    top2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化为0</span>    etv <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        etv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化为0</span>    stack2 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> gettop<span class="token operator">=</span>stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//++top对应top--;top++对应(top-1)--,举例分析即可</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d -> "</span><span class="token punctuation">,</span>GL<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印此顶点</span>        count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计输出顶点数</span>        stack2<span class="token punctuation">[</span><span class="token operator">++</span>top2<span class="token punctuation">]</span><span class="token operator">=</span>gettop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将弹出的顶点序号压入拓扑排序队列</span>        <span class="token comment" spellcheck="true">//对此顶点的边表遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span>GL<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>e <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>e<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> k<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">--</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将此顶点的邻接点k的入度减1</span>                stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//若为0则入栈，以便于下次循环输出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>etv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">)</span><span class="token operator">></span>etv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//求各顶点事件最早发生时间值</span>                etv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>etv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果count小于顶点数，说明存在环</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>下面是求关键路径的算法代码</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*求关键路径，GL为有向网，输出GL的各项关键活动*/</span><span class="token comment" spellcheck="true">/*时间复杂度O(n+e)*/</span><span class="token comment" spellcheck="true">/*ltv从拓扑序列的尾端开始倒着计算，故需要拓扑序列出栈*/</span><span class="token comment" spellcheck="true">/*ltv的计算见大话数据结构Page285 图7-9-8*/</span><span class="token comment" spellcheck="true">/*ete和lte的计算见大话数据结构Page286 图7-9-10*/</span><span class="token keyword">void</span> <span class="token function">CriticalPath</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span> GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    EdgeNode <span class="token operator">*</span> e<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> ete<span class="token punctuation">,</span>lte<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明活动最早发生时间和最迟发生时间变量</span>    <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>GL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求拓扑序列，计算数组etv和stack2的值</span>    ltv <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ltv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>etv<span class="token punctuation">[</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化ltv</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>top2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//计算ltv</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> gettop<span class="token operator">=</span>stack2<span class="token punctuation">[</span>top2<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将拓扑序列出栈，后进先出</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span>GL<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>e <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>e<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*求各顶点事件的最迟发生事件ltv*/</span>            k<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一般弧是v gettop指向vk,故gettop&lt;k</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ltv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>e<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">)</span><span class="token operator">&lt;</span>ltv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//比如ltv[10]-len&lt;v9,v10> &lt;ltv[9]</span>                ltv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token operator">=</span>ltv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>e<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">;</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求ete和lte和关键路径</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>GL<span class="token operator">-</span><span class="token operator">></span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//两重循环嵌套是对邻接表的顶点和每个顶点的弧表遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span>GL<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>e <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>e<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            k<span class="token operator">=</span>e<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//一般弧是vj指向vk,故j&lt;k,j为弧尾，k为弧头</span>            ete<span class="token operator">=</span>etv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//活动&lt;vj,vk>最早开工时间，只有弧尾vj的事件发生了，活动才能开始，故ete=etv[j]</span>            lte<span class="token operator">=</span>ltv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>e<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//活动&lt;vj,vk>最晚开工时间,此活动最晚也得在vk前发生，故lte=ltv[k]-len&lt;vj,vk></span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ete<span class="token operator">==</span>lte<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//两者相等即在关键路径上</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;v%d,v%d> length: %d , "</span><span class="token punctuation">,</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>GL<span class="token operator">-</span><span class="token operator">></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>e<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话数据结构学习笔记-树</title>
      <link href="/2019/12/18/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6.%E6%A0%91/"/>
      <url>/2019/12/18/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6.%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="6-树"><a href="#6-树" class="headerlink" title="6 树"></a>6 树</h2><h3 id="1-树的基本知识"><a href="#1-树的基本知识" class="headerlink" title="1.树的基本知识"></a>1.树的基本知识</h3><p>树(Tree)时n(n&gt;=0)个结点的有限集。n=0时称空树；在任意一颗非空树中：(1) <strong>有且仅有一个</strong>特定的称为根(Root)的结点(2)当n&gt;1时，其余节点可分为m(m&gt;0)个<strong>互不交叉</strong>的有限集T1 T2 ……Tn,每一个集合又是一棵树，并称位根的子树(SubTree)</p><p><strong>结点的度(Degree)</strong>：结点拥有的子树个数，度为0的为叶子结点(Leaf),度不为0的称为分支结点，除根节点外，分支结点也称内部节点。树的度为树内各节点的度的最大值</p><p><strong>结点间的关系</strong>：结点的子树的跟称为该结点的孩子(Child),该结点称为孩子的双亲(Parent),同一个双亲的孩子之间互称兄弟(Sibling);结点的祖先是从根到该结点所有分支上的所有结点，反之，以某结点为根的子树中的任一结点都称为该结点的子孙</p><p><strong>树的深度或高度</strong>：结点的层次从根开始定义，根为第一层，根的孩子为第二层，依次类推。树中结点的最大层次称为树的深度或高度。森林(Forest)是m棵互不交叉的树的集合</p><p><strong>树的抽象数据结构</strong></p><pre class=" language-cpp"><code class="language-cpp">ADT 树<span class="token punctuation">(</span>Tree<span class="token punctuation">)</span>Data    树是由一个根结点和若干棵子树构成。树种结点具有相同数据类型及层次关系Operation    <span class="token function">InitTree</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">:</span>构造空树    <span class="token function">Destory</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span>    <span class="token function">CreateTree</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span>definition<span class="token punctuation">)</span><span class="token operator">:</span>按definition中给出的树的定义来构造树    <span class="token function">ClearTree</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span>    <span class="token function">TreeEmpty</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>    <span class="token function">TreeDepth</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>    <span class="token function">Root</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>    <span class="token function">Value</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span>：cur_e是树中的一个结点，返回此节点的值    <span class="token function">Assign</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token function">Parent</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span>：返回cur_e结点的双亲    <span class="token function">LeftChild</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span>    <span class="token function">RightSibling</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span>    <span class="token function">InsertChild</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span>i<span class="token punctuation">,</span>c<span class="token punctuation">)</span>：其中p指向树T的某个结点，i为所指结点的度加上<span class="token number">1</span>，非空树c与T不相交，操作结果为插入c树为树T中p指结点的第i棵子树上    <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span>i<span class="token punctuation">)</span>endADT</code></pre><h3 id="2-树的存储结构"><a href="#2-树的存储结构" class="headerlink" title="2.树的存储结构"></a>2.树的存储结构</h3><p>由于树中结点间存在双亲与儿子结点，简单的顺序结构无法满足树的实现要求，下面介绍三种表示方法：双亲表示法、孩子表示法、孩子兄弟表示法</p><p><strong>双亲表示法</strong><br>每个结点中带一个指针域指向其唯一的双亲在链表中的位置</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*树的双亲表示法结点结构定义*/</span><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 100</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> PTreeNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//双亲位置，根结点的parent设置为-1，根结点本身设置为0</span><span class="token punctuation">}</span>PTNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    PTNode nodes<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结点数组</span>    <span class="token keyword">int</span> r<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根的位置和结点数 </span><span class="token punctuation">}</span>PTree<span class="token punctuation">;</span></code></pre><p>如果需要知道结点的孩子结点，可以增加一个长子域，用来存放每个结点最左边的孩子，对于0 1 2个结点解决了找孩子的问题；<br>同理，如果需要知道兄弟间的关系，可以增加右兄弟域来记录每个结点的右兄弟的下标</p><p><strong>孩子表示法</strong><br>我们把每个结点放到一个顺序存储结构的数组中，但每个结点的孩子结点是不确定的，所以我们对每个结点建立一个单链表体现他们的关系。下面详细说明：<br>把<strong>每个结点的孩子结点排列起来，以单链表作为存储结构</strong>，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空。然后<strong>n个头指针又组成一个线性表</strong>，采用顺序存储结构，存放进一个一维数组中(见大话数据结构Page160)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*树的孩子表示法结构定义*/</span><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 100</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ChildTreeNode <span class="token comment" spellcheck="true">//孩子结点</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> child<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//孩子结点的数据域，存放某个结点在表头数组中的下标，如1 2 3</span>    <span class="token keyword">struct</span> ChildTreeNode <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针域，指向某结点下一个孩子结点的指针</span><span class="token punctuation">}</span>CTNode<span class="token punctuation">;</span>typdef <span class="token keyword">struct</span>  <span class="token comment" spellcheck="true">//表头结构</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据域，存放某结点的数据信息 ，如"A" "B"</span>    CTNode <span class="token operator">*</span> firstchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针域，存放该结点的孩子链表头指针</span><span class="token punctuation">}</span>CTBox<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span>  <span class="token comment" spellcheck="true">//树结构</span><span class="token punctuation">{</span>    CTBox nodes<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结点数组</span>    <span class="token keyword">int</span> r<span class="token punctuation">,</span>n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根的位置和结点数</span><span class="token punctuation">}</span>CTree<span class="token punctuation">;</span></code></pre><p>对于这样的结构，我们查找某个结点的某个孩子或者查找某个结点的兄弟，只需要查找这个结点的孩子单链表即可；遍历整颗树也很方便，对头节点的数组循环即可</p><p>但是如果需要知道某个结点的双亲则比较麻烦，需要遍历整棵树，因此我们可以结合双亲表示法和孩子表示法，在孩子表示法的表头结构CTBox中，加入CTNode * parent,我们称其为双亲孩子表示法</p><p><strong>孩子兄弟表示法</strong><br>我们发现，对于任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的，因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟，这种表示法最大的好处在于把一颗复杂的树转变成了二叉树(见大话数据结构Page160)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*树的孩子兄弟表示结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ChildSiblingTreeNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ChildSiblingNode <span class="token operator">*</span> firstChild<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ChildSiblingNode <span class="token operator">*</span> rightSibling<span class="token punctuation">;</span><span class="token punctuation">}</span>CSTNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    CSTNode <span class="token operator">*</span> header<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//树的头指针</span><span class="token punctuation">}</span>CSTree<span class="token punctuation">;</span></code></pre><p>这种表示方法给查找某个结点的某个孩子结点带来了方便，只需要通过firstChild找到此结点的长子，在通过长子结点的rightSibling找到它的兄弟，接着一直找下去；但这种表示法的缺陷在于找某个结点的双亲，我们可以再增加一个parent指针来解决这个问题</p><h3 id="3-二叉树"><a href="#3-二叉树" class="headerlink" title="3.二叉树"></a>3.二叉树</h3><p>二叉树(Binary Tree)是n(n&gt;=0)个结点的有限集合，该集合或者为空集(称为空二叉树)，或者由一个根结点和两颗互不相交的、分别称为根结点的左子树和右子树的二叉树组成<br>二叉树的特点：</p><ul><li>每个结点最多只有两颗子树，所以二叉树不存在度大于2的结点</li><li>左子树和右子树是有次序的，不能交换</li><li>即使树中某结点只有一颗子树，也要区分是左子树还是右子树</li></ul><p>二叉树的五种基本形态：</p><ul><li>空二叉树</li><li>只有一个根结点</li><li>根结点只有左子树</li><li>根结点只有右子树</li><li>根结点既有左子树又有右子树</li></ul><p>特殊二叉树：</p><ul><li>斜树：所有结点都只有左子树(或者右子树)的二叉树，线性表结构可以理解为特殊的斜树</li><li>满二叉树：所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树<ul><li>叶子只能出现在最下一层</li><li>非叶子结点的度一定是2</li><li>在同样深度的二叉树中，满二叉树的结点个数最多，叶子树最多</li></ul></li><li>完全二叉树：对于一颗具有n个结点的二叉树按层序编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这颗二叉树称为完全二叉树(见大话数据结构Page167)<ul><li>叶子结点只出现在最下面两层</li><li>最下层的叶子一定集中在左部连续位置</li><li>倒数第二层若有叶子结点，一定都在右部连续位置</li><li>若结点度为1，则该结点只有左子树</li><li>同样结点数的二叉树，完全二叉树的深度最小</li></ul></li><li><blockquote><p>完全二叉树和满二叉树的区别：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树</p></blockquote></li></ul><h4 id="3-1-二叉树的性质"><a href="#3-1-二叉树的性质" class="headerlink" title="3.1 二叉树的性质"></a>3.1 二叉树的性质</h4><ol><li>在二叉树的第i层上最多有2^(i-1)个结点(i&gt;=1)</li><li>深度为k的二叉树最多有(2^k)-1个结点(k&gt;=1)</li><li>对于任意一颗二叉树T,如果其叶子数位n,度为2的结点数为m,则n=m+1;我们设p为度为1的结点数，则有树T的结点总数记为t=n+p+m(见大话数据结构Page170)。<ul><li>考虑树中连接线数,总分支进入数=总分支出去数</li><li>总分支进入数=结点数-1(根结点没有分支进入，其余结点都有一个分支进入)；</li><li>总分支出去数=2*度为2的结点数+度为1的结点数;</li></ul></li><li>具有n个结点的完全二叉树的深度为[ln n/ln2]+1(见大话数据结构Page170)</li><li>如果对于一颗有n个结点的完全二叉树的结点按层序编号(从第一层开始，每层从左到右)，对任一结点i有：<ul><li>如果i=1,则结点i时二叉树的根；如果i&gt;1,则其双亲是结点[i/2]</li><li>如果2i&gt;n,则结点i无左孩子，否则其左孩子是结点2i</li><li>如果2i+1&gt;n,则结点i无左孩子，否则其左孩子是结点2i</li></ul></li></ol><h4 id="3-2-二叉树的存储结构"><a href="#3-2-二叉树的存储结构" class="headerlink" title="3.2 二叉树的存储结构"></a>3.2 二叉树的存储结构</h4><p>二叉树的顺序存储结构：一般的树用顺序存储实现起来比较困难，但是由于二叉树的特殊性，使得顺序结构也能实现。<br>具体来说就是用一维数组来存储二叉树中的结点，顺序(数组下标)按照二叉树的层序编号(按顺序补齐，若对应编号位置若在二叉树中没有结点，则与之对应的数组下标对应的空间为NULL)(见大话数据结构Page173)</p><p>二叉树的链式存储结构：二叉树每个结点最多有两个孩子，所以设计一个数据域和两个指针域(对应孩子兄弟表示法)，我们称这样的链表为二叉链表</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二叉树的二叉链表结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BinaryNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BinaryNode <span class="token operator">*</span> lchild<span class="token punctuation">,</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BNode<span class="token punctuation">,</span><span class="token operator">*</span>BTree<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*typedef struct BinaryTree{    BNode * root;    //按需要添加}BTree;*/</span></code></pre><h4 id="3-3-二叉树的遍历"><a href="#3-3-二叉树的遍历" class="headerlink" title="3.3 二叉树的遍历"></a>3.3 二叉树的遍历</h4><p>二叉树的遍历(Traversing Binary Tree)是指从根结点出发按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且竟仅被访问一</p><p><strong>前序遍历</strong><br>若二叉树为空，则返回；否则先访问根结点，然后前序遍历左子树，再前序遍历右子树</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二叉树的前序遍历递归算法*/</span><span class="token keyword">void</span> <span class="token function">PreOrderTravese</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结点数据，可以改为其他对结点操作</span>    <span class="token function">PreOrderTravese</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再先序遍历左子树</span>    <span class="token function">PreOrderTravese</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后先序遍历右子树</span><span class="token punctuation">}</span></code></pre><p><strong>中序遍历</strong><br>若二叉树为空，则返回；否则从根结点开始(注意并不是先访问根结点)中序遍历根结点的左子树然后是访问根结点，最后中序遍历右子树</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二叉树的中遍历递归算法*/</span><span class="token keyword">void</span> <span class="token function">InOrderTravese</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">InOrderTravese</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中序遍历左子树</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span>显示结点数据，可以改为其他对结点操作    <span class="token function">InOrderTravese</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后中序遍历右子树</span><span class="token punctuation">}</span></code></pre><p><strong>后序遍历</strong><br>若二叉树为空，则返回；否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二叉树的后序遍历递归算法*/</span><span class="token keyword">void</span> <span class="token function">PostOrderTravese</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">PostOrderTravese</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先后序遍历左子树</span>    <span class="token function">PostOrderTravese</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再后序遍历右子树</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后显示结点数据，可以改为其他对结点操作</span><span class="token punctuation">}</span></code></pre><p><strong>层序遍历</strong><br>若二叉树为空，则返回；否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问</p><p><strong>总结</strong>：</p><ul><li>上述遍历算法其实都是把树中的结点变成某种意义的线性序列</li><li>已知前序和中序的遍历队列，可以唯一确定一颗二叉树</li><li>已知后序和中序的遍历队列，可以唯一确定一颗二叉树</li><li>已知前序和后序的遍历队列，不能唯一确定一颗二叉树，无法区分左右子树(见大话数据结构Page186)</li></ul><h4 id="3-4-二叉树的建立"><a href="#3-4-二叉树的建立" class="headerlink" title="3.4 二叉树的建立"></a>3.4 二叉树的建立</h4><p>假设要在内存中建立一棵树，但为了能让每个结点确认是否有左右孩子，我们对二叉树中的每个结点的空指针引出一个虚结点，其值设为’#’，我们称这种处理后的二叉树为原二叉树的扩展二叉树<br>(见大话数据结构Page186)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*按前序输入二叉树中结点的值(假设为一个字符)*/</span><span class="token comment" spellcheck="true">/*#表示空树，构造二叉链表表示二叉树T*/</span><span class="token keyword">void</span> <span class="token function">CreateBTree</span><span class="token punctuation">(</span>BTree <span class="token operator">*</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>    ElemType ch<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>        <span class="token operator">*</span>T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>T <span class="token operator">=</span><span class="token punctuation">(</span>BTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token operator">*</span>T<span class="token punctuation">)</span>            <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成根结点</span>        <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造左子树</span>        <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造右子树</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-线索二叉树"><a href="#4-线索二叉树" class="headerlink" title="4.线索二叉树"></a>4.线索二叉树</h3><p>对于一个有n个结点的二叉链表，每个结点有左右2个指针域，一共是2n个指针域，而n个结点的二叉树一共有n-1分支线数，也就是说存在n+1个空指针域，浪费了内存资源(见大话数据结构Page188)</p><p>所以考虑将二叉树的所有空指针域中的lchild改为指向当前结点的前驱(按某种遍历方式确定的序列里)；空指针域中的rchild改为指向当前结点的后继，我们<strong>把这种指向前驱和后继的指针称为线索</strong>，加上线索的二叉链表称为线索链表，<strong>相应的二叉树称为线索二叉树</strong>(Thread Binary Tree)(见大话数据结构Page190 图 6-10-3和6-10-4)</p><p>虽然线索二叉树等于是把一颗二叉树转变成了一个双向链表，对插入删除查找结点都带来了方便；不过问题并没有解决，我们还需要区分某结点的指针域里lchild是指向它的左孩子还是指向前驱，rchild同理；依次我们再每个结点再增设两个布尔类型的标志域ltag和rtag(占用空间小)(见大话数据结构Page191)</p><p><strong>线索二叉树的结构实现</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二叉树的二叉线索存储结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BinaryThreadedNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BinaryThreadedNode <span class="token operator">*</span> lchild<span class="token punctuation">,</span>rchild<span class="token punctuation">;</span>    <span class="token keyword">bool</span> LTag<span class="token punctuation">,</span>RTag<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//值为1时表示指向前驱或后继，值为0表示指向左右孩子指针</span><span class="token punctuation">}</span>BThrNode<span class="token punctuation">,</span><span class="token operator">*</span>BThrTree<span class="token punctuation">;</span></code></pre><p>线索化的实质就是将二叉链表中的空指针改为前驱或后继的线索。由于前驱和后继的信息只有在遍历二叉树时才能得到，所以<strong>线索化的过程就是在遍历的过程中修改空指针的过程</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*中序遍历进行中序线索化*/</span>BThrTree pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局变量，始终指向刚刚访问过的结点</span><span class="token keyword">void</span> <span class="token function">InThreading</span><span class="token punctuation">(</span>BThrTree p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>BThrTree p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归左子树线索化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//没有左孩子</span>        <span class="token punctuation">{</span>            p<span class="token operator">-</span><span class="token operator">></span>Ltag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前驱线索</span>            p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token operator">=</span>pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左孩子指针指向前驱</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//此时p结点的后继还没有访问到，因此只能对它的前驱结点pre的右指针rchild做判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//前驱没有右孩子</span>        <span class="token punctuation">{</span>            pre<span class="token operator">-</span><span class="token operator">></span>RTag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后继线索</span>            pre<span class="token operator">-</span><span class="token operator">></span>rchild <span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前驱右孩子指针指向后继(当前结点p)</span>        <span class="token punctuation">}</span>        pre<span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保持pre指向p的前驱</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>BThrTree p<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归左子树线索化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>有了线索二叉树以后，我们对其遍历时发现，其实等于操作一个双向链表。因此，我们在二叉树线索链添加一个头结点(见大话数据结构Page193 图 6-10-6),这样的好处是既可以从第一个结点起顺后继续进行遍序，也可以从最后一个结点起顺前驱续进行遍序，遍历的代码如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*T指向头结点，头结点lchild指向根结点，rchild指向中序遍历的最后一个结点*/</span><span class="token comment" spellcheck="true">/*二叉树的中序序列里第一个结点的lchild和最后一个结点的rchild都指向头结点*/</span><span class="token comment" spellcheck="true">/*中序遍历二叉线索链表表示的二叉树T*/</span><span class="token comment" spellcheck="true">/*时间复杂度O(n)*/</span><span class="token keyword">int</span> <span class="token function">InOrderTraverse_Thr</span><span class="token punctuation">(</span>BThrTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BThrTree p<span class="token punctuation">;</span>    p<span class="token operator">=</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p指向根结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//空树或者遍历结束时，p ==T</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>LTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当LTag==0时循环到中序序列的第一个结点(最左边最下层)</span>            p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示结点数据，可以更改为其他对结点的操作</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>RTag <span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-</span><span class="token operator">></span>rchild <span class="token operator">!=</span> T<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>child<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>child<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p进至其右子树根</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>总结：</p><ul><li>在实际运用中，需要先对二叉树按照特定的顺序进行线索化生成二叉树线索链表，才能对其进行遍历</li><li>由于充分利用了空指针域的空间，又保证了创建时的一次线索化就可以生成能一直使用的前驱后继信息，所以如果二叉树需要经常遍历或者查找结点时需要某种遍历序列中的前驱和后继，那么则适合采用线索二叉链表的存储结构</li></ul><h3 id="5-树、森林与二叉树的转换"><a href="#5-树、森林与二叉树的转换" class="headerlink" title="5.树、森林与二叉树的转换"></a>5.树、森林与二叉树的转换</h3><p>从前面知道，树的孩子兄弟表示法可以将一棵树用二叉链表进行存储，所以借助二叉链表，树和二叉树可以相互转换<br><strong>树转换为二叉树</strong></p><ul><li>加线。在所有兄弟结点之间加一条连线。</li><li>去线。对树中每个结点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线。</li><li>层次调整。以根结点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明。注意第一个孩子是二叉树的结点的左孩子，那么它的兄弟转换过来是它的右孩子(见大话数据结构Page196 图6-11-2)</li></ul><p><strong>森林转换为二叉树</strong></p><ul><li>把森林中的每棵树转换为二叉树</li><li>第一颗二叉树不动，从第二颗二叉树开始，依次把后一颗二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来</li></ul><p><strong>二叉树转换为树</strong><br>二叉树转换为树是树转换为二叉树的反过程</p><ul><li>加线。左孩子的n个右孩子结点(左孩子的右孩子的右孩子…类推)都作为此结点的孩子，将该结点与这些右孩子结点用线连接起来</li><li>去线。删除原二叉树中所有结点与其右孩子结点的连线</li><li>层次调整</li></ul><p><strong>二叉树转换为森林</strong><br>判断一颗二叉树能否转换成森林的标准是二叉树的根结点有右孩子。如果没有右孩子，则转换成一棵树</p><ul><li>从根结点开始，若右孩子存在，则把与右孩子的连线删除，再查看分离后的二叉树，重复上过程，知道所有右孩子连线都上述为止，得到分离的二叉树</li><li>再将每颗分离后的二叉树转换为树即可</li></ul><p><strong>树与森林的遍历</strong></p><ul><li>树的遍历：<ul><li>先根遍历，即先访问树的根结点，然后依次先根遍历根的每颗子树</li><li>后根遍历，先依次后根遍历每颗子树，然后再访问树的根结点</li></ul></li><li>森林的遍历<ul><li>前序遍历：先访问森林中第一棵树的根结点，然后依次先根遍历根的每颗子树，再依次用同样方式遍历其余树构成的森林</li><li>后序遍历：先访问森林中的第一棵树，后根遍历的方式遍历每颗子树，然后再访问根结点，再依次用同样方式遍历其余树构成的森林</li></ul></li></ul><p>总结：森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同；因此当以二叉链表作树的存储结构时，树的先根遍历和后根遍历可以借用二叉树的前序遍历和中序遍历算法来实现</p><h3 id="6-赫夫曼树"><a href="#6-赫夫曼树" class="headerlink" title="6.赫夫曼树"></a>6.赫夫曼树</h3><p>路径长度：从树中一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数目称为路径长度</p><p>树的路径长度：从树根到每一个结点的路径长度之和</p><p>考虑到带权重的结点，假设有n个权值{w1,w2,…,wn}构造一颗有n个叶子结点的二叉树，每个叶子的路径长度为l(k),权值为w(k)，则树的带权路径长度WPL最小的二叉树称为赫夫曼树，WPL=min(w(k)*l(k)求和)</p><p><strong>赫夫曼树的构造</strong></p><ol><li>先把有权值的叶子结点按照权值从小到大的顺序排列起来，如 A5,E10,B15,D30,C40</li><li>取前两个权值最小的结点作为一个新节点N1的两个子结点，两个里较小的为左孩子，新节点权值为两子结点权值之和，如A为N1左孩子，E为N1右孩子，N1权值15</li><li>将N1替换A和E,按权值从小到大插入有序序列，即N1 15,B15,D30,C40</li><li>重复上诉步骤，直到队列中无结点(最后生成的新结点即为根结点)</li></ol><p><strong>赫夫曼编码</strong><br>一般地，设需要编码的字符集为{d1,d2,…,dn},各个字符在电文中出现的次数或频率集合为{w1,w2,…,wn},以d1,d2,…,dn作为叶子结点，以w1,w2,…,wn作为叶子结点的权值来构造一颗赫夫曼树。规赫夫曼树的左分支为0，右分支为1，则从根结点到叶子结点所经过的路径分支组成的0和1的序列便为该结点所对应字符的编码，这就是赫夫曼编码</p><p>编码中非0即1，长短不等的话容易混淆，所以要设计长短不等的编码，则必须是<strong>任一字符的编码都不是另一个字符的编码的前缀，这种编码称为前缀编码</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话数据结构学习笔记-串</title>
      <link href="/2019/12/15/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5.%E4%B8%B2/"/>
      <url>/2019/12/15/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5.%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="5-串"><a href="#5-串" class="headerlink" title="5 串"></a>5 串</h2><p>串（string)又名字符串，零个或多个字符组成的有限序列。空串 空格串 子串 </p><p>串的比较：通过组成串的字符之间的编码来比较，字符的编码是指字符在对应字符集中的序号，串a和串b大小比较如下:</p><ul><li>串的位数直接比较</li><li>位数相同，按串第一位字母对应的ascii码比较，若相同，继续比较下一位</li></ul><h3 id="1-串的抽象数据类型"><a href="#1-串的抽象数据类型" class="headerlink" title="1.串的抽象数据类型"></a>1.串的抽象数据类型</h3><p>串的逻辑结构和线性表很相似，但基本操作与线性表是有一定的区别，线性表更关注单个元素的操作，比如查找、插入或者删除一个元素；串中更多的是查找子串位置、得到指定位置字符串、替换字符串等操作</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*串的抽象数据类型*/</span>ADT 串<span class="token punctuation">(</span>string<span class="token punctuation">)</span>Data    串中元素仅由一个字符组成，相邻元素具有前驱和后继关系Operation    <span class="token function">StrAssign</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span><span class="token operator">*</span>chars<span class="token punctuation">)</span><span class="token operator">:</span>生成一个其值等于字符串常量chars的串T    <span class="token function">StrCopy</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token operator">:</span>由串S复制得到串T    <span class="token function">ClearString</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span>    <span class="token function">StringEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span>    <span class="token function">StrLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span>    <span class="token function">StrCompare</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token operator">:</span>若S<span class="token operator">></span>T返回值<span class="token operator">></span><span class="token number">0</span>    <span class="token function">Concat</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>S1<span class="token punctuation">,</span>S2<span class="token punctuation">)</span><span class="token operator">:</span>生成S1和S2联接成的新串T    <span class="token function">SubString</span><span class="token punctuation">(</span>Sub<span class="token punctuation">,</span>S<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token operator">:</span>返回在串S中第pos个字符起长度为len的串Sub    <span class="token function">Index</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token operator">:</span>若主串S中存在和串T相同的子串，则返回其在S中第pos个字符之后第一次出现的位置    <span class="token function">Replace</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token operator">:</span>用串V替换S中出现的所有与T相同的不重叠子串    <span class="token function">StrInsert</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token operator">:</span>在串S的第pos个字符之前插入串T    <span class="token function">StrDelete</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token operator">:</span>从串S中删除第pos个字符起长度为len的子串    <span class="token comment" spellcheck="true">//添加自己所需的方法</span>endADT</code></pre><p>实现Index的操作</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>String S<span class="token punctuation">,</span>String T<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    String Sub<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">StrLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">StrLength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">SubString</span><span class="token punctuation">(</span>Sub<span class="token punctuation">,</span>S<span class="token punctuation">,</span>i<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">StrCompare</span><span class="token punctuation">(</span>Sub<span class="token punctuation">,</span>T<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-串的数据结构"><a href="#2-串的数据结构" class="headerlink" title="2.串的数据结构"></a>2.串的数据结构</h3><p>串的存储结构与线性表相同，分为两种</p><p><strong>串的顺序存储结构</strong></p><p>串的顺序存储结构使用一组地址连续的存储单元来存储串中的字符串序列，一般用定长数组来定义。定长数组存在一个预定义的最大串的长度，一般可以将实际的串长度保存在数组的0下标位置，c语言中在末尾加’\0’表示串值的中介</p><p><strong>串的链式存储结构</strong><br>由于串结构的特殊性，如果链表中的节点data部分只存储一个字符会存在很大的空间浪费，因此可以考虑一个节点存放多个字符，若最后一个节点未被充满，可以用其他非串值字符补全，链式串除了在连接串与串操作时方便一些之外，总的来说不如顺序串存储灵活，性能也不如顺序串好</p><h3 id="3-朴素模式匹配算法"><a href="#3-朴素模式匹配算法" class="headerlink" title="3.朴素模式匹配算法"></a>3.朴素模式匹配算法</h3><p>简单来说就是以主串的每一个字符作为子串开头，与要匹配的字符串进行匹配。队主串做大循环，对每个子串开头做T(记要匹配的串长度为T)的小循环，直到匹配成功或全部遍历完成</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*返回子串T在主串S中第pos个字符之后的位置，若不存在返回0*/</span><span class="token comment" spellcheck="true">/*T非空，1&lt;=pos&lt;=StrLength(S)*/</span><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>String S<span class="token punctuation">,</span>String T<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从pos位置开始匹配</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token function">Strlength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span><span class="token function">StrLength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token function">T</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//两字母相等时则继续</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//指针后退从新开始匹配</span>        <span class="token punctuation">{</span>           i<span class="token operator">=</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//i退回上次匹配首位的下一位,新i值为i+j-1,需-j+2才为原来的i+1</span>           j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//j退回串T的首位</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token function">Strlength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//j大于串T的长度时则已匹配到或者已遍历完</span>        <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token function">Strlength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>时间复杂度分析：设n为主串长度，m为要匹配的串长度;</p><ul><li>最好的情况为一开始匹配到则时间复杂度O(1);</li><li>最坏的情况就是每次不成功的匹配都发生在串T的最后一个字符，如S为49个0和1个1组成的字符串，T为9个0和1个1的字符串，则S串中前40个位置都需要判断10次，第41次判断10次后匹配，则时间复杂度为O((n-m+1)*m)<h3 id="4-KMP模式匹配算法"><a href="#4-KMP模式匹配算法" class="headerlink" title="4.KMP模式匹配算法"></a>4.KMP模式匹配算法</h3>核心思想：减少朴素匹配模式中不必要的回溯。通过分析原理可知(见大话数据结构Page136)主串中i值不会回溯，唯一考虑变化的就是带匹配的字符串T中每位字符串的j值；j值的多少取决于当前字符之前的串的前后缀相似度。我们把j值的变化定义为一个next数组，记为next[j]<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*计算返回子串T的next数组*/</span><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">StrLength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//T[i]表示后缀的单个字符，T[j]表示前缀的单个字符</span>      <span class="token punctuation">{</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>          j<span class="token operator">++</span><span class="token punctuation">;</span>          next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>          j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若字符不相同，则j值回溯</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*返回子串T在主串S中第pos个字符之后的位置，若不存在返回0*/</span><span class="token comment" spellcheck="true">/*T非空，1&lt;=pos&lt;=StrLength(S)*/</span><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>String S<span class="token punctuation">,</span>String T<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从pos位置开始匹配</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">get_next</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token function">Strlength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span><span class="token function">StrLength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token function">T</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//两字母相等时则继续,与朴素匹配算法增加了j=0判断</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//指针后退从新开始匹配</span>        <span class="token punctuation">{</span>           j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token function">Strlength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//j大于串T的长度时则已匹配到或者已遍历完</span>        <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token function">Strlength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>KMP匹配时间复杂度O(n+m),需要强调的是仅在与主串之间存在许多部分匹配的情况下，KMP算法才能能明显体现出它的优势</p><p><strong>KMP模式匹配算法改进</strong><br>(见大话数据结构Page143)<br>经过改进后的KMP算法，在计算出next值的同时，如果a位字符与他next值指向的b位字符相等，则a位的nextval就指向b位的nextval值，如果不等，则该a位的nextval值就是他自己a位的next值</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*计算返回子串T的nextval数组*/</span><span class="token keyword">void</span> <span class="token function">get_nextval</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">StrLength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//T[i]表示后缀的单个字符，T[j]表示前缀的单个字符</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token keyword">else</span>                nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果当前字符与前缀字符相同，则将前缀字符的nextval值赋给nextval在i位置的值</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若字符不相同，则j值回溯</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话数据结构学习笔记-栈和队列</title>
      <link href="/2019/12/12/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/2019/12/12/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="4-栈和队列"><a href="#4-栈和队列" class="headerlink" title="4 栈和队列"></a>4 栈和队列</h2><p>栈(stack):限定仅在表尾进行插入和删除操作的线性表，通常把允许插入和删除的一端称为栈顶top;栈又称为先进后出(LIFO)的线性表</p><ul><li>栈是一个线性表</li><li>栈的特殊之处在于限定了线性表的插入和删除位置，始终在栈顶(表尾)进行插入和删除</li><li>栈的栈底是固定的，第一个进入栈的元素在栈底</li></ul><p><strong>栈的抽象数据类型</strong></p><pre class=" language-cpp"><code class="language-cpp">ADT 栈<span class="token punctuation">(</span>stack<span class="token punctuation">)</span>Data    同线性表<span class="token punctuation">.</span>元素具有相同的类型，相邻元素具有前驱和后继关系Operation    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token function">DestoryStack</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token function">ClearStack</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token function">StackEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token function">GetTop</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span>    <span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span>    <span class="token function">StackLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>endADT</code></pre><h3 id="1-栈的顺序存储结构"><a href="#1-栈的顺序存储结构" class="headerlink" title="1.栈的顺序存储结构"></a>1.栈的顺序存储结构</h3><ul><li>栈底：数组下标为0的一端，</li><li>栈顶：数组高下标的位置，因为在插入和删除时不需要移动数组中的元素<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*栈的结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType；<span class="token keyword">typedef</span> <span class="token keyword">struct</span> SequenceStack<span class="token punctuation">{</span>  ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> top<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//或者int length,用于确定栈顶位置;top取值范围为0到MaxSize-1,-1时为空栈</span><span class="token punctuation">}</span>SStack<span class="token punctuation">;</span></code></pre></li><li><em>栈的进栈和出栈*</em><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*插入元素为e的新的栈顶元素*/</span><span class="token keyword">int</span> <span class="token function">Push</span><span class="token punctuation">(</span>SStack <span class="token operator">*</span>S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-</span><span class="token operator">></span>top <span class="token operator">==</span>MaxSize<span class="token number">-1</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   S<span class="token operator">-</span><span class="token operator">></span>top<span class="token operator">++</span><span class="token punctuation">;</span>   S<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>S<span class="token operator">-</span><span class="token operator">></span>top<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>/<em>删除栈顶元素,并用e返回其值</em>/<br>int Pop(SStack *S,ElemType *e)<br>{<br>    if(S-&gt;top ==-1)<br>        return false;</p><pre><code>*e=S-&gt;data[S-&gt;top];S-&gt;top--;return true;</code></pre><p>}</p><pre><code>### 2.两个栈共享空间用一个数组存储两个栈，一个栈的栈底为数组下标为0处(数组始端)，另一个栈的栈底为下标n-1处(数组末端),两个栈分别向中间靠拢(见大话数据结构Page95 图4.5.1)假设top1和top2分别为栈1和栈2的栈顶，当top1=-1时，栈1为空，top2=n时，栈2为空;易知top1+1==top2时栈满```cpp/*两栈共享数组空间*/typedef struct SequenceDoubleStack{    ElemType data[MaxSize];    int top1;    int top2;}SDStack;/*插入元素为e的新的栈顶元素,stackNum判断是栈1还是栈2的参数*/int Push(SDStack *S,ElemType e,int stackNum){    if(S-&gt;top1+1 == S-&gt;top2)        return false;    if(stackNum ==1)        S-&gt;data[++S-&gt;top1]=e;    else if(stackNum ==2)        S-&gt;data[--S-&gt;top2]=e;    return true;}/*删除栈顶元素,并用e返回其值*/int Pop(SDStack *S,ElemType *e,int stackNum){    if(stackNum ==1)    {        if(S-&gt;top1 ==-1)            return false;        *e=S-&gt;data[S-&gt;top1--];    }    else if (stackNum ==2)    {        if(S-&gt;top2 ==n)            return false;         *e=S-&gt;data[S-&gt;top2++];    }    return true;}</code></pre><p>这样的数据结构适用于同元素类型的栈,特别是一个栈增长一个栈缩短时</p><h3 id="3-栈的链式存储结构"><a href="#3-栈的链式存储结构" class="headerlink" title="3.栈的链式存储结构"></a>3.栈的链式存储结构</h3><p>栈的链式结构：由于栈需要栈顶，单链表有头指针，故可以把栈顶放在单链表的头部，对于链栈来说，此时头节点就无足轻重了(栈的操作都是基于栈顶)。一个空的链栈就是top=NULL</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*链栈的结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StackNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>SNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> LinkStack<span class="token punctuation">{</span>    SNode <span class="token operator">*</span> top<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶指针</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>LStack<span class="token punctuation">;</span></code></pre><p><strong>链栈的进栈和出栈操作</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*插入元素为e的新的栈顶元素,类似于头插法*/</span><span class="token keyword">int</span> <span class="token function">Push</span><span class="token punctuation">(</span>LStack <span class="token operator">*</span> S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    SNode <span class="token operator">*</span> <span class="token keyword">new</span><span class="token operator">=</span><span class="token punctuation">(</span>SNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span><span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token keyword">new</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>S<span class="token operator">-</span><span class="token operator">></span>top<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进栈</span>    S<span class="token operator">-</span><span class="token operator">></span>top<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改栈顶</span>    S<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*删除栈顶元素,保存到元素e中*/</span><span class="token keyword">int</span> <span class="token function">Push</span><span class="token punctuation">(</span>LStack <span class="token operator">*</span> S<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>S<span class="token operator">-</span><span class="token operator">></span>top<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>    SNode <span class="token operator">*</span> pCurr<span class="token operator">=</span>S<span class="token operator">-</span><span class="token operator">></span>top<span class="token punctuation">;</span>    S<span class="token operator">-</span><span class="token operator">></span>top<span class="token operator">=</span>pCurr<span class="token operator">-</span><span class="token operator">></span>next<span class="token comment" spellcheck="true">//出栈</span>    S<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pCurr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>总结：</p><ul><li>顺序栈和链式栈的进栈和出栈在时间复杂度都为O(1)</li><li>顺序栈需要确定固定的长度，可能存在内存空间浪费的问题,优点是读取定位方便；链式栈每个元素都有指针域也同样增加了内存开销，但栈的长度无限制</li><li>如果栈的长度确定，顺序栈更好；若栈的长度不能确定，链式栈更好</li></ul><h3 id="4-栈的应用"><a href="#4-栈的应用" class="headerlink" title="4.栈的应用"></a>4.栈的应用</h3><p><strong>递归</strong></p><p>递归和迭代的区别:</p><ul><li>迭代使用循环结构，递归使用选择结构</li><li>递归结构更简洁易懂，但递归的调用会建立函数副本，会耗费大量时间和内存</li></ul><p>编译器使用栈实现递归：在前行阶段，对于每一层递归，函数的局部变量、参数及返回地址都被压入栈中；在退回阶段，位于栈顶的局部变量、参数及返回地址都被弹出，用于返回调用层次中执行代码的其余部分，即恢复调用状态</p><p><strong>四则运算求表达式</strong></p><p>中缀表达式：目前我们习惯的写法<br>后缀表达式：运算符放数字后面的写法，计算机计算</p><ol><li>中缀表达式转后缀表达式：<blockquote><p>数字：直接输出</p></blockquote></li></ol><blockquote><p>括号和运算符</p></blockquote><ul><li>左括号：进栈</li><li>运算符：与栈顶符号进行优先级比较<ul><li>若优先级不低于栈顶符号，此符号进栈（乘除高于加减）</li><li>若优先级低于栈顶符号，则将栈顶符号弹出，之后进栈</li></ul></li><li>右括号：将栈顶符号弹出，直到匹配左括号<br>按顺序输出则为后缀表达式</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*中缀表达式转后缀表达式伪代码*/</span><span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">{</span>    创建栈S<span class="token punctuation">;</span>    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为数字<span class="token punctuation">)</span>            <span class="token function">Output</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为符号<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>优先级<span class="token operator">&lt;=</span>栈顶符号优先级<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">Output</span><span class="token punctuation">(</span>栈顶符号<span class="token punctuation">)</span>；                    <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为左括号<span class="token punctuation">)</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为右括号<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>栈顶不为左括号<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Output</span><span class="token punctuation">(</span>栈顶符号<span class="token punctuation">)</span>；                <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>左括号<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            错误，停止循环<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ‘\<span class="token number">0</span>’<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">output</span><span class="token punctuation">(</span>栈顶符号<span class="token punctuation">)</span>；        Pop（S）<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>计算机计算后缀表达式</li></ol><p>计算规则如下：</p><ul><li><p>对于数字：进栈</p></li><li><p>对于符号：</p><ul><li>从栈中弹出右操作数</li><li>从栈中弹出左操作数</li><li>根据符号计算</li><li>将结果压入栈中</li></ul></li><li><p>遍历结束：输出栈中唯一数字</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">calculate</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">{</span>  创建栈S<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为数字<span class="token punctuation">)</span>          <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为符号<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          从栈中弹出右操作数<span class="token punctuation">;</span>          从栈中弹出左操作数<span class="token punctuation">;</span>          根据符号计算<span class="token punctuation">;</span>          将结果压入栈中<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>           报错，停止循环<span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Size</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ‘\<span class="token number">0</span>’<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      栈中唯一的数字为运算结果；  <span class="token punctuation">}</span></code></pre></li></ul><p>}</p><pre><code>### 5.队列队列：只允许一端进行插入(队尾)，另一端进行删除(对头)的线性表，是一种先进先出(FIFO)的线性表```cpp/*队列的抽象数据结构*/ADT 队列(Queue)Data    同线性表。元素具有相同数据类型，相邻元素具有前驱和后继关系Operation    InitQueue(*Q)    DestoryQueue(*Q)    ClearQueue(*Q)    QueueEmpty(Q)    GetHead(Q,*e)    EnQueue(*Q,e)//插入队尾    DeQueue(*Q,*e)//删除队头    QueueLength(Q)endADT</code></pre><p><strong>队列的顺序存储</strong></p><p>假设数组的下标为0的一端为队头，另一端为队尾</p><ul><li>入队(EnQueue)操作就是在队尾添加一个元素，不需要移动，时间复杂度O(1)</li><li>出队(DeQueue)操作就是在队头删除元素，即下标为0的位置元素删除，其余元素往前移动一个位置，时间复杂度O(n),代码实现参考顺序线性表</li><li>假设增加队头指针，则出队时不用移动元素位置，只需改变队头指针；但队头指针前的空间位置浪费，假溢出，则引入循环队列(见大话数据结构Page114 图4.12.5)</li></ul><h3 id="6-顺序循环队列"><a href="#6-顺序循环队列" class="headerlink" title="6.顺序循环队列"></a>6.顺序循环队列</h3><ul><li>引入front指针指向队头元素，rear指针指向队尾元素的下一个位置</li><li>当为空队列时，front等于rear；当队列满时，front也等于rear,那么如何判断队列究竟是空还是满<ul><li>方法一：设置一个标志位flag</li><li>方法二：当队列满时，修改条件，保留一个元素位置空间，此时认为队列为满(见大话数据结构Page115 图4.12.8)</li></ul></li></ul><p>对于方法二,队列满的条件为<code>(rear+1)%QueueSize == front</code> ;队列的长度为<code>(rear-front+QueueSize)%QueueSize</code></p><p><strong>循环队列的顺序存储结构即初始化</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*循环队列的顺序存储结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> CircleSequenceQueue<span class="token punctuation">{</span>    ElemType  data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾指针，若队列不为空，指向队尾元素的下一个位置</span><span class="token punctuation">}</span>CSQueue<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>CSQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    Q<span class="token operator">-</span><span class="token operator">></span>front <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>CSQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">-</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span>MaxSize<span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>循环队列的入队出队</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*循环队列的顺序存储结构*/</span><span class="token keyword">int</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>CSQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize <span class="token operator">==</span> Q<span class="token operator">-</span><span class="token operator">></span>front<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Q<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span>e<span class="token punctuation">;</span>    Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rear指针后移一位，若到最后则转到数组头部</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>CSQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-</span><span class="token operator">></span>front <span class="token operator">==</span> Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>Q<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>Q<span class="token operator">-</span><span class="token operator">></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    Q<span class="token operator">-</span><span class="token operator">></span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token operator">-</span><span class="token operator">></span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-队列的链式存储结构即实现"><a href="#7-队列的链式存储结构即实现" class="headerlink" title="7.队列的链式存储结构即实现"></a>7.队列的链式存储结构即实现</h3><p>链式队列：队头为第一个节点，队尾为终端节点；为方便操作，让队头指针指向头节点，空队列时，front和rear都指向头节点</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*链式队列结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> QueueNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> QueueNode <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>QNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> LinkQueue<span class="token punctuation">{</span>    Queue<span class="token operator">*</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队头对指针</span>    <span class="token comment" spellcheck="true">//其他需要元素自己添加</span><span class="token punctuation">}</span>LQueue<span class="token punctuation">;</span></code></pre><p><strong>链式队列入队出队操作</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*入队，在链表尾部插入节点*/</span><span class="token keyword">int</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNode <span class="token operator">*</span> <span class="token keyword">new</span> <span class="token operator">=</span><span class="token punctuation">(</span>QNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span><span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token keyword">new</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾部插入节点</span>    Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新尾部节点</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*出队，删除链表第一个节点*/</span><span class="token keyword">int</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>LQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-</span><span class="token operator">></span>front <span class="token operator">==</span> Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span> pCurr<span class="token operator">=</span>Q<span class="token operator">-</span><span class="token operator">></span>front<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存第一个节点</span>    <span class="token operator">*</span>e<span class="token operator">=</span>pCurr<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>    Q<span class="token operator">-</span><span class="token operator">></span>front<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>pCurr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出队，更新第一个节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-</span><span class="token operator">></span>rear <span class="token operator">==</span> pCurr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//若队列只有一个元素，队头就是队尾时，出对后将rear指向头节点</span>        Q<span class="token operator">-</span><span class="token operator">></span>rear<span class="token operator">=</span>Q<span class="token operator">-</span><span class="token operator">></span>front<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pCurr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话数据结构学习笔记-线性表</title>
      <link href="/2019/12/10/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3.%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2019/12/10/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3.%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1 绪论"></a>1 绪论</h2><h3 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h3><p>数据结构：相互之间存在一种或多种特定关系的数据元素的集合</p><p>根据视点的不同，数据结构分为逻辑结构和物理结构</p><p><strong>逻辑结构</strong>：数据元素间的关系</p><ol><li>集合结构</li><li>线性结构(数据元素一对一)</li><li>树形结构(数据元素一对多)</li><li>图形结构(数据元素多对多)</li></ol><p><strong>物理结构</strong>(存储结构)：数据的逻辑结构在计算机中的存储形式</p><ol><li>顺序存储结构：数据元素放进地址连续的存储单元，其数据间逻辑关系和物理关系是一致的</li><li>链式存储结构：数据元素放进任意存储单元里，这组存储单元可以是连续的，也可以是不连续的</li></ol><p>逻辑结构是面向问题的，物理结构面向计算机的</p><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><p>数据类型：一组性质相同的值的集合<br>抽象数据类型ADT:自定义出来的集合</p><h2 id="2-算法"><a href="#2-算法" class="headerlink" title="2 算法"></a>2 算法</h2><p>算法：解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作</p><h3 id="1-算法的特性"><a href="#1-算法的特性" class="headerlink" title="1.算法的特性"></a>1.算法的特性</h3><ol><li>输入输出</li><li>有穷性</li><li>确定性</li><li>可行性<h3 id="2-算法设计的要求"><a href="#2-算法设计的要求" class="headerlink" title="2.算法设计的要求"></a>2.算法设计的要求</h3></li><li>正确性<blockquote><p>算法程序无错误</p></blockquote></li></ol><blockquote><p>算法程序对于合法输入数据能够产生满足要求的输出结果</p></blockquote><blockquote><p>算法程序对于非法输入数据能够产生满足规格说明的输出结果</p></blockquote><blockquote><p>算法程序对于精心选择甚至刁难的数据都有满足要求的输出结果<br>2. 可读性<br>3. 健壮性：输入数据不合法时，算法也能做出相关处理而不是产生异常或者崩溃<br>4. 时间空间效率</p></blockquote><h3 id="3-算法时间复杂度"><a href="#3-算法时间复杂度" class="headerlink" title="3.算法时间复杂度"></a>3.算法时间复杂度</h3><p>算法时间复杂度：</p><ol><li>大O记法：只保留最高阶</li><li>常数阶O(1) 线性阶O(n) 平方阶O(n^2) 对数阶O(log n)</li><li>最好最坏情况：无特殊说明，都是指最坏时间复杂度</li></ol><p>O(log n)示例:</p><p><code>while (int count &lt;n)</code><br><code>{count =*2}</code></p><h2 id="3-线性表"><a href="#3-线性表" class="headerlink" title="3. 线性表"></a>3. 线性表</h2><p>线性表(List):零个或多个数据元素的<strong>有限</strong> <strong>序列</strong></p><h3 id="1-线性表的抽象数据类型"><a href="#1-线性表的抽象数据类型" class="headerlink" title="1.线性表的抽象数据类型"></a>1.线性表的抽象数据类型</h3><pre class=" language-cpp"><code class="language-cpp">ADT 线性表<span class="token punctuation">(</span>List<span class="token punctuation">)</span>Data     线性表的数据对象集合为<span class="token punctuation">{</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>an<span class="token punctuation">}</span><span class="token punctuation">,</span>每个数据元素类型均为Datatype，每个元素只有一个钱去和后继元素Operation    <span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">:</span>初始化操作，建立一个空表L    <span class="token function">ListEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>    <span class="token function">ClearList</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span>    <span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token operator">:</span>将线性表L中第i个元素的值返回给e    <span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token operator">:</span>查找与e值相等的元素，若查找成功，返回该元素在表中的序列号；否则，返回<span class="token number">0</span>表示失败    <span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>endADT</code></pre><p>对于复杂的操作，都是由基本操作组成<br>以下实现两个线性表的并集</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* 将所有在线性表Lb中但不在La中的元素插入到La中 即La=La U Lb(并集)*/</span><span class="token keyword">void</span> <span class="token keyword">union</span><span class="token punctuation">(</span>List <span class="token operator">*</span> La，List Lb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> La_Len <span class="token operator">=</span><span class="token function">ListLength</span><span class="token punctuation">(</span>La<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Lb_Len <span class="token operator">=</span><span class="token function">ListLength</span><span class="token punctuation">(</span>Lb<span class="token punctuation">)</span><span class="token punctuation">;</span>    ElemType e<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span>  i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Lb_Len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">GetElem</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LocateElem</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">ListInsert</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span><span class="token operator">++</span>La_Len<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-线性表的顺序存储结构"><a href="#2-线性表的顺序存储结构" class="headerlink" title="2.线性表的顺序存储结构"></a>2.线性表的顺序存储结构</h3><p>下面以一维数组来实现</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*线性表结构的定义*/</span><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 20</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>SqList<span class="token punctuation">;</span></code></pre><p>从上述代码所知，顺序存储结构需要三个属性：</p><ul><li>存储空间起始位置：数组data</li><li>线性表最大存储容量：数组长度MaxSize</li><li>线性表的当前长度：Length</li></ul><p>假设线性表中每个元素占据c个存储单元(LOC表示获得存储位置的函数)，那么LOC(a i+1) =LOC(a i)+c，对于每个线性表位置的存入或取出数据所需时间相等，我们把具有这种特点的存储结构成为<strong>随机存储结构</strong></p><p><strong>获得元素操作</strong>：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">*</span>e <span class="token operator">=</span>L<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>插入元素操作</strong>：</p><ul><li><p>判断插入位置，若位置不合理抛出异常</p></li><li><p>如果线性表长度大于等于数组长度，抛出异常或者动态增加容量</p></li><li><p>从最后一个元素向前遍历到第i个位置，分别将它们往后移一个位置</p></li><li><p>将要插入的元素放入位置i处，表长+1</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*操作结果：在顺序表L中第i个位置之前插入新的数据元素e */</span><span class="token keyword">int</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">==</span>MaxSize<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*顺序表已满*/</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*当i不在范围内*/</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>L<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*插入数据位置不在表尾*/</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>length<span class="token number">-1</span><span class="token punctuation">;</span>k<span class="token operator">></span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*插入位置后数据元素向后移动一位*/</span>          L<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  L<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*新元素插入*/</span>  L<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><em>删除元素操作*</em>：</p></li><li><p>判断位置，若不合理，抛出异常</p></li><li><p>取出删除元素</p></li><li><p>从删除元素位置开始遍历到最后一个元素，分别将其向前移动一个位置</p></li><li><p>表长减1</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*操作结果：删除顺序表L中第i个位置的元素，用e返回其值 */</span><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*线性表为空*/</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*删除位置不正确*/</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token operator">*</span>e <span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*取出元素*/</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*删除的是顺序表的最后一个元素则将其置空*/</span>      L<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>L<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*如果删除不是最后位置*/</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>L<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 将删除位置后面的元素前移*/</span>          L<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  L<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>线性表的顺序结构在写入和读取时间复杂度O(1);插入和删除时时间复杂度O(n)</p></li></ul><h3 id="3-线性表的链式存储结构"><a href="#3-线性表的链式存储结构" class="headerlink" title="3.线性表的链式存储结构"></a>3.线性表的链式存储结构</h3><p>定义链表结构</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*线性表的单链表存储结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node <span class="token comment" spellcheck="true">/*定义节点类型*/</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> LList  <span class="token comment" spellcheck="true">/*定义链表类型*/</span><span class="token punctuation">{</span>    Node <span class="token operator">*</span> header<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*头指针(属于头节点，指向第一个节点)(详见大话数据结构Page58 图3.6.5)*/</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>LList<span class="token punctuation">;</span></code></pre><p><strong>获得元素操作</strong>：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* 用e返回L中第i个数据元素的值*/</span><span class="token comment" spellcheck="true">/* 时间复杂度O(n)*/</span><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>LList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*位置异常*/</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span> pCur <span class="token operator">=</span>L<span class="token punctuation">.</span>header<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义pCur指向第一个节点*/</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pCur <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*获取指向第i个节点的指针*/</span>    <span class="token punctuation">{</span>        pCur<span class="token operator">=</span>pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pCur <span class="token operator">||</span> j<span class="token operator">></span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*第i个元素不存在*/</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>pCur<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>单链表的插入</strong></p><ol><li>让待插入节点指向第i-1个节点的后继节点</li><li>让第i-1个节点指向待插入节点 </li></ol><p>注意：必须按顺序操作</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* 在L中第i个位置之前插入新的元素e*/</span><span class="token comment" spellcheck="true">/*时间复杂度O(n)：需要遍历链表，单纯插入操作O(1)*/</span><span class="token keyword">int</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>LList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*当i不在范围内*/</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Node <span class="token operator">*</span> pCur <span class="token operator">=</span>L<span class="token punctuation">.</span>header<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义pCur指向第一个节点*/</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pCur <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*获取指向第i-1个节点的指针*/</span>    <span class="token punctuation">{</span>        pCur<span class="token operator">=</span>pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pCur <span class="token operator">||</span> j<span class="token operator">></span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*第i个元素不存在*/</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*插入操作*/</span>    Node <span class="token operator">*</span>s<span class="token operator">=</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    s<span class="token punctuation">.</span>next<span class="token operator">=</span>pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>    L<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>单链表的删除</strong><br>当前节点指向当前节点的后继节点的后继节点<br>即<code>pCur-&gt;next =pCur-&gt;next-&gt;next</code></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*操作结果：删除单链表L中第i个位置的元素，用e返回其值 */</span><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>LList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*位置异常*/</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span> pCur <span class="token operator">=</span>L<span class="token punctuation">.</span>header<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义pCur指向第一个节点*/</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pCur <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*获取指向第i-1个节点的指针*/</span>    <span class="token punctuation">{</span>        pCur<span class="token operator">=</span>pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pCur <span class="token operator">||</span> j<span class="token operator">></span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*第i个元素不存在*/</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*删除第i个节点*/</span>    Node <span class="token operator">*</span>pDel <span class="token operator">=</span>pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>pCur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token operator">*</span>e<span class="token operator">=</span>pDel<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*释放该节点指向的内存，因为插入时malloc在堆上了*/</span>    L<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于插入和删除越频繁的顺序表，单链表的效率越明显</p><p><strong>单链表的创建</strong><br>创建单链表的过程就是一个动态生产链表的过程，即从空表的初始状态起，依次建立各元素节点，并逐个插入链表</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*随机产生n个元素的值，建立带头结点的单链线性表L(头插法)*/</span><span class="token keyword">void</span>  <span class="token function">CreateLinkList</span><span class="token punctuation">(</span>LList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*建立链表*/</span>    <span class="token operator">*</span>L<span class="token operator">=</span><span class="token punctuation">(</span>LList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> L<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token operator">-</span><span class="token operator">></span>header<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token operator">-</span><span class="token operator">></span>header<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*头插法插入节点*/</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*创建新节点*/</span>        Node <span class="token operator">*</span> <span class="token keyword">new</span><span class="token operator">=</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span><span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">new</span><span class="token punctuation">.</span>next<span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>header<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        L<span class="token operator">-</span><span class="token operator">></span>header<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*插入到表头*/</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*尾插法插入节点*/</span>    <span class="token operator">/</span><span class="token operator">*</span>    Node <span class="token operator">*</span> rear <span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>header<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node <span class="token operator">*</span> <span class="token keyword">new</span><span class="token operator">=</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span><span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        rear<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span>        rear<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rear<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token constant">NULL</span> <span class="token comment" spellcheck="true">//不要忘记尾节点指向空</span><span class="token punctuation">}</span></code></pre><p><strong>单链表的清空与删除</strong><br>单链表的清空：删除每一个节点<br>单链表的删除：删除LList指针</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Clear_LinkList</span><span class="token punctuation">(</span>LList <span class="token operator">*</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span> pCurr<span class="token operator">=</span>L<span class="token operator">-</span><span class="token operator">></span>header<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pCurr<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node <span class="token operator">*</span> pNext<span class="token operator">=</span>pCurr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pCurr<span class="token punctuation">)</span>        pCurr<span class="token operator">=</span>pNext<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Destroy_LinkList</span><span class="token punctuation">(</span>LList <span class="token operator">*</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> L<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//清空链表</span>    <span class="token function">Clear_LinkList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-静态链表"><a href="#4-静态链表" class="headerlink" title="4.静态链表"></a>4.静态链表</h3><p><strong>静态链表</strong>：用数组描述的链表,数组的元素都由两个数据域构成，data和cur(游标，相当于next指针,存放该元素的后继在数组中的下标)</p><ol><li>为了方便插入数据，通常会把数组建立的大一些，以便有空闲空间</li><li>游标Cursor,为0表示无指向</li><li>数组的第一个和最后一个元素作为特殊元素，不存数据;通常把未被使用的数组元素成为备用链表(记住哪些地方为空，插入和删除时分配空间);数组的第一个元素的cur就存放备用链表的第一个节点的下标;数组的最后一个元素的cur则存放第一个有数值的元素的下标，相当于单链表的头节点(详见大话数据结构Page72 图3.12.1和3.12.2)</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*线性表的静态链表存储结构*/</span><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 1000</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StaticList<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span>  <span class="token punctuation">}</span> SList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将一维数组space中各分量链成一备用链表*/</span><span class="token keyword">int</span> <span class="token function">InitStaticList</span><span class="token punctuation">(</span>SList sapce<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MaxSize<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sapce<span class="token punctuation">[</span>MaxSize<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*当前静态链表为空，最后一个元素的cur为0*/</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>静态链表的插入</strong></p><p>静态链表要解决的是：用静态模拟动态链表结构的存储空间的分配，需要时申请，无用时释放</p><ol><li>静态链表操作的是数组，无法使用malloc和free,需要自己实现</li><li>实现malloc:从备用链表上去的第一个节点作为待插入的新节点<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* 若备用空间链表非空，则返回分配的节点下标。否则返回0*/</span><span class="token keyword">int</span> <span class="token function">Malloc_StaticList</span><span class="token punctuation">(</span>SList space<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token operator">=</span>sapce<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*当前数组第一个元素的cur存的值就是要返回的第一个备用空闲的下标*/</span> <span class="token keyword">if</span><span class="token punctuation">(</span>space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span>     sapce<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token operator">=</span>space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p>/<em>在静态链表L中第i个元素前插入新的数据元素e</em>/<br>int ListInsert(SList L,int i,ElemType e)<br>{<br>    if(i&lt;1 ||i&gt;ListLength(L)+1)<br>        return false;<br>    int k=MaxSize-1;//k为最后一个元素的下标<br>    int j=Malloc_StaticList(L);//获得空闲的下标<br>    if(j)<br>    {<br>        L.data=e;<br>        for(int m=1;m&lt;i;m++)<br>            k=L[k].cur//找到第i-1个元素位置的下标<br>        L[j].cur=L[k].cur; //把第i-1个元素的cur值(即下一个元素的下标)赋值给新元素的cur<br>        L[k].cur=j; //把新元素的下标赋值给第i-1个元素的cur值<br>        return true;<br>    }<br>    return false;<br>}</p><pre><code>**静态链表的删除**``` cpp/*在静态链表L中删除第i个数据元素e*/int ListDelete(SList L,int i){    if(i&lt;1 ||i&gt;ListLength(L)+1)        return false;    int k=MaxSize-1;//k为最后一个元素的下标    for(int m=1;m&lt;i;m++)        k=L[k].cur; //k为第i-1个元素的位置的下标    int j=L[k].cur; //j为第i个元素的位置的下标    L[k].cur=L[j].cur//删除第i个元素    Free_StaticList(L,j);//释放    return true;}/*将下标为j的元素回收到备用链表*//*让下标为j的元素成为备用链表的第一个元素*/void Free_StaticList(SList sapce,j){    sapce[j].cur=sapce[0].cur;//把第一个元素的cur值赋值给要删除的元素的cur值    sapce[0].cur=j;//把要删除的元素的位置赋值给第一个元素的cur值}</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*返回静态链表L中元素个数*/</span><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>SList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span>L<span class="token punctuation">[</span>MaxSize<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k<span class="token operator">=</span>L<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>静态链表优缺点</strong></p><ul><li>优点：在插入和删除时不需要删除元素，只需要移动游标，改进了顺序存储结构插入删除时需要移动大量数据元素的缺点</li><li>缺点：没有解决连续存储分配带来的表长难以确定的问题;失去了顺序存储结构随机存取的特性<h3 id="5-循环链表"><a href="#5-循环链表" class="headerlink" title="5.循环链表"></a>5.循环链表</h3>循环链表：单链表中终端节点的指针由空指针改为指向头节点，使得单链表头尾相连(见大话数据结构Page79 图3.13.4)</li><li>循环链表解决了从任意一个结点出发，访问链表全部节点的问题</li><li>循环链表和单链表的差异：循环条件的判断上，判断p-&gt;next是否等于头指针</li><li>在单链表中需要O(1)时间访问第一个节点，O(n)时间访问终端节点；在循环链表中，让指向终端节点的尾指针rear来指向循环链表,则查找终端节点O(1),查找第一个节点rear-&gt;next-next O(1)<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*合并两个循环链表A B*/</span>p<span class="token operator">=</span>rearA<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*保存A的头节点*/</span>rearA<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>rearB<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*A的终端节点指向B的第一个节点(不是B的头节点)*/</span>rearB<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token operator">/</span>B的终端节点指向A的头节点</code></pre><h3 id="6-双向链表-double-linked-list"><a href="#6-双向链表-double-linked-list" class="headerlink" title="6.双向链表(double linked list)"></a>6.双向链表(double linked list)</h3>双向链表：在单链表的每个节点中都有两个指针，一个指向后继节点，另一个指向前驱节点。由于双向链表每个节点要记录两个指针，空间占用略多于单链表，属于空间换时间<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*线性表的双向链表存储结构*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> DoubleNode<span class="token punctuation">{</span>  ElemType data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> DoubleNode <span class="token operator">*</span> prior<span class="token punctuation">;</span>  <span class="token keyword">struct</span> DoubleNode <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>DNode<span class="token punctuation">;</span></code></pre></li><li><em>双向链表的插入和删除*</em></li></ul><p>先搞定待插入节点s的前驱和后继，再搞定p-&gt;next的前驱，最后解决p的后继</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*将s指向的节点插入节点p和p->next之间*/</span>s<span class="token operator">-</span><span class="token operator">></span>prior<span class="token operator">=</span>p<span class="token punctuation">;</span>s<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>prior<span class="token operator">=</span>s<span class="token punctuation">;</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*删除节点p*/</span>p<span class="token operator">-</span><span class="token operator">></span>prior<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>p<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span>prior<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>prior<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git版本控制系统</title>
      <link href="/2019/12/03/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/03/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Git版本控制系统"><a href="#Git版本控制系统" class="headerlink" title="Git版本控制系统"></a>Git版本控制系统</h1><h2 id="一-Git基本知识"><a href="#一-Git基本知识" class="headerlink" title="一 Git基本知识"></a>一 Git基本知识</h2><p>版本控制系统：</p><ol><li>记录历史版本信息(记录每次修改记录)</li><li>方便团队相互协作开发</li></ol><p>常用版本控制系统：</p><ul><li>cvs/svn:集中式版本控制系统(必须有一个中央总控服务器来管理历史版本和代码信息)<blockquote><p>需要联网才能回退或查看历史版本信息</p></blockquote></li></ul><blockquote><p>需要中央服务器</p></blockquote><blockquote><p>上传下载基于文件传输方式完成，速度慢</p></blockquote><ul><li>git:分布式版本控制系统(本地就是一个代码管理仓库)<blockquote><p>无需网络也能记录和查看历史版本信息</p></blockquote></li></ul><blockquote><p>不过分依赖中央仓库</p></blockquote><blockquote><p>与中央仓库采用文件流传输，速度快</p></blockquote><a id="more"></a> <h2 id="二-Git工作原理与环境设置"><a href="#二-Git工作原理与环境设置" class="headerlink" title="二 Git工作原理与环境设置"></a>二 Git工作原理与环境设置</h2><p> 环境变量设置目录，点击环境变量，在用户环境变量部分点击新建，输入变量名：Home，输入变量值：D:/Git</p><ol><li><p><strong>工作区</strong>：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p></li><li><p><strong>版本库(Repository)</strong>：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是</p><blockquote><p><strong>stage(暂存区)</strong>，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD</p></blockquote><blockquote><p><strong>历史区</strong>:生成历史版本</p></blockquote><p>从工作区提交到暂存区，从暂存区提交到历史区，是把内容复制一份传过去的，本区中仍有一份(只有这样才能对比文件在哪个区)</p></li><li><p>使用Git提交文件到版本库有两步：<br>&emsp; &emsp; &emsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p><p>&emsp;  &emsp; &emsp;第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上</p></li></ol><h2 id="三-创建提交回退"><a href="#三-创建提交回退" class="headerlink" title="三 创建提交回退"></a>三 创建提交回退</h2><h3 id="1-GIT全局配置"><a href="#1-GIT全局配置" class="headerlink" title="1.GIT全局配置"></a>1.GIT全局配置</h3><p>查看配置信息</p><ul><li>git config -l 查看配置信息</li><li>git config –global -l 查看全局配置信息<br>配置全局信息:user email<blockquote><p><code>git config --global user.name&quot;用户名&quot;</code><br><code>git config --global user.mail &quot;邮箱地址&quot;</code></p></blockquote></li></ul><h3 id="1-创建提交"><a href="#1-创建提交" class="headerlink" title="1.创建提交"></a>1.创建提交</h3><ul><li>git init 把这个目录变成git可以管理的仓库(生成隐藏文件夹 “.git” <strong>暂存区</strong>和<strong>历史区</strong>还有一些其他信息都在这里)</li><li>git add 文件名(提交到暂存区)</li><li>git add . 或者 git add -A(把所有文件提交到暂存区)</li><li>git commit -m”注释”(把暂存区提交到历史区)</li><li>git status(查看当前文件状态，红色:在工作区;绿色:在暂存区;看不见东西:所有修改已提交到历史区)</li><li>git diff (比较工作区和暂存区内容差异)<h3 id="2-查看记录-回退"><a href="#2-查看记录-回退" class="headerlink" title="2.查看记录 回退"></a>2.查看记录 回退</h3></li><li>git log </li><li>git log –pretty=oneline </li><li>git reset  –hard HEAD^(回退一个版本)</li><li>git reset –hard HEAD~100(回退到前100个版本的话) </li><li>git reflog (查看所有版本号)</li><li>git reset  –hard 版本号 </li></ul><h3 id="3-撤销删除"><a href="#3-撤销删除" class="headerlink" title="3.撤销删除"></a>3.撤销删除</h3><ul><li><p>修改后还没有进入暂存区(还未 git add):<code>git restore 文件名</code>(撤销修改)</p></li><li><p>修改后已进入暂存区(已git add):<code>git reset HEAD</code>(取消add) <code>git restore 文件名</code></p></li><li><p><del><code>git reset –hard HEAD</code></del> 注意：恢复到上一次提交（小心使用，不然辛辛苦苦写的全没了）</p></li><li><p>删除文件 rm 文件名 </p></li><li><p>恢复文件 <code>git restore 文件名</code> </p><h2 id="三-远程仓库"><a href="#三-远程仓库" class="headerlink" title="三 远程仓库"></a>三 远程仓库</h2></li></ul><p>1.<code>git remote -v</code>(查看本地仓库和哪些远程仓库保持连接)</p><ol><li><code>git remote add origin https://github.com/LanceHuang95/TestGit.git</code> (删除关联 <code>git remote rm origin</code>)</li><li>使用git push命令,把本地库的内容推送到远程,首次提交需要输入用户名和密码  <code>git push -u origin master</code>(提交之前最好先拉取 <code>git pull origin master</code>)</li></ol><p>&emsp;&emsp;实际上是把当前分支master推送到远程。由于远程库是空的我们第一次推送master分支时，加上了–u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了。</p><ol start="3"><li>从现在起，只要本地作了提交，就可以通过如下命令：<code>git push origin master</code><br>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</li></ol><p>4.<code>https://github.com/LanceHuang95/TestGit.git</code></p><h2 id="四-分支创建合并删除"><a href="#四-分支创建合并删除" class="headerlink" title="四 分支创建合并删除"></a>四 分支创建合并删除</h2><h3 id="1-创建合并分支"><a href="#1-创建合并分支" class="headerlink" title="1.创建合并分支"></a>1.创建合并分支</h3><ol><li>版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。</li><li>截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。<h3 id="2-分支操作命令"><a href="#2-分支操作命令" class="headerlink" title="2.分支操作命令"></a>2.分支操作命令</h3></li></ol><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch name</code></li><li>切换分支：<code>git checkout name</code></li><li>创建+切换分支：<code>git checkout –b name</code></li><li>合并某分支到当前分支：<code>git merge name</code>(使用Fast forward模式，在这种模式下，删除分支后，会丢掉分支信息) </li><li>合并某分支: <code>git merge --no-ff -m &quot;注释&quot; name</code>(关闭fast-forward模式，在提交的时候，会创建一个merge的commit信息，然后合并的和master分支)</li><li>查看历史记录：<code>git log --graph --pretty=oneline --abbrev-commit</code></li><li>删除分支：<code>git branch –d name</code></li></ul><h2 id="五-多人协作"><a href="#五-多人协作" class="headerlink" title="五 多人协作"></a>五 多人协作</h2><h3 id="1-开发分支常用流程"><a href="#1-开发分支常用流程" class="headerlink" title="1.开发分支常用流程"></a>1.开发分支常用流程</h3><p>首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><ul><li><p>创建一个dev分支：<code>git checkout -b dev</code></p></li><li><p>修改readme.txt内容：<code>echo aaaaaaa&gt;&gt;readme.txt</code></p></li><li><p>添加到暂存区：<code>git add .</code></p></li><li><p>提交修改：<code>git commit -m &quot;add merge&quot;</code></p></li><li><p>切换回主分支(master)：<code>git checkout master</code></p></li><li><p>合并dev分支: <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p></li><li><p>删除dev分支：<code>git branch -d dev</code></p></li><li><p>查看历史记录：<code>git log --graph --pretty=oneline --abbrev-commit</code></p></li><li><p>解决分支合并冲突：首先提交，然后分支合并，如果提示合并有冲突就手动修改文件，然后再次提交</p><h3 id="2-bug分支"><a href="#2-bug分支" class="headerlink" title="2.bug分支"></a>2.bug分支</h3></li></ul><p>&emsp;&emsp;在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉</p><p>&emsp;&emsp;在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。由于工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作</p><blockquote><p>流程如下:</p></blockquote><ul><li>dev分支下暂存工作现场<code>git stash</code>  </li><li>切换到主分支 创建新issue分支并切换到issue分支  </li><li>修改bug 存入暂存区 提交(修复完成)</li><li>切换到主分支，合并issue分支，删除issue分支</li><li>切换回dev分支(工作区是干净的,工作现场去哪里呢？我们可以使用命令 <code>git stash list</code>来查看)</li><li>恢复工作现场：<code>git stash apply</code>(恢复，恢复后，stash内容并不删除，你需要使用命令<code>git stash drop</code>来删除)  <code>git stash pop</code>(恢复的同时把stash内容也删除了)</li></ul><h3 id="3-多人协作"><a href="#3-多人协作" class="headerlink" title="3.多人协作"></a>3.多人协作</h3><p>&emsp;&emsp;当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。</p><p>&emsp;&emsp;要查看远程库的信息,使用<code>git remote</code>要查看远程库的详细信息 使用<code>git remote –v</code><br>结果如下：</p><blockquote><p>origin  <a href="https://github.com/LanceHuang95/TestGit.git" target="_blank" rel="noopener">https://github.com/LanceHuang95/TestGit.git</a> (fetch)<br>origin  <a href="https://github.com/LanceHuang95/TestGit.git" target="_blank" rel="noopener">https://github.com/LanceHuang95/TestGit.git</a> (push)</p></blockquote><h3 id="3-推送分支"><a href="#3-推送分支" class="headerlink" title="3.推送分支"></a>3.推送分支</h3><p>一般情况下，那些分支要推送呢？</p><ol><li>master分支是主分支，因此要时刻与远程同步。</li><li>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</li></ol><ul><li><code>git push origin master</code></li><li><code>git push origin dev</code></li></ul><h2 id="六-Git常用指令"><a href="#六-Git常用指令" class="headerlink" title="六 Git常用指令"></a>六 Git常用指令</h2><h3 id="emsp-git基本常用命令"><a href="#emsp-git基本常用命令" class="headerlink" title="&emsp; git基本常用命令"></a>&emsp; git基本常用命令</h3><ul><li>mkdir：         XX (创建一个空目录 XX指目录名)</li><li>pwd：          显示当前目录的路径。</li><li>git init ：         把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</li><li>git add XX ：      把xx文件添加到暂存区去。</li><li>git commit -m “XX” ： 提交文件 –m 后面的是注释。</li><li>git status：        查看仓库状态</li><li>git diff  XX ：     查看XX文件修改了那些内容</li><li>git log ：         查看历史记录</li><li>git reset  –hard HEAD^ ：或者 git reset  –hard HEAD~ 回退到上一个版本<pre><code>                (如果想回退到100个版本，使用git reset --hard HEAD~100 )</code></pre></li><li>cat XX   ：      查看XX文件内容</li><li>git reflog  ：     查看历史记录的版本号id</li><li>git checkout – XX ： 把XX文件在工作区的修改全部撤销。<ul><li>git rm XX  ：        删除XX文件</li><li>git remote add origin <a href="https://github.com/RTplay/testgit.git：" target="_blank" rel="noopener">https://github.com/RTplay/testgit.git：</a> 关联一个远程库</li><li>git push -u(第一次要用-u 以后不需要) origin master ：把当前master分支推送到远程库</li><li>git clone <a href="https://github.com/RTplay/testgit.git" target="_blank" rel="noopener">https://github.com/RTplay/testgit.git</a> ： 从远程库中克隆</li><li>git checkout -b dev ： 创建dev分支 并切换到dev分支上</li><li>git branch  ：查看当前所有的分支</li><li>git checkout master ：切换回master分支</li><li>git merge dev    ：在当前的分支上合并dev分支</li><li>git branch -d dev ：删除dev分支</li><li>git branch name  ：创建分支</li><li>git stash ：把当前的工作隐藏起来 等以后恢复现场后继续工作</li><li>git stash list ：查看所有被隐藏的文件列表</li><li>git stash apply ：恢复被隐藏的文件，但是内容不删除</li><li>git stash drop： 删除文件</li><li>git stash pop： 恢复文件的同时 也删除文件</li><li>git remote： 查看远程库的信息</li><li>git remote -v ：查看远程库的详细信息</li></ul></li><li>git push origin master  ：Git会把master分支推送到远程库对应的远程分支上</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
